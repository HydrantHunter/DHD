--[[  LanteaCraft      ]]--
--[[    Gate Liaison   ]]--
--[[  version  1.0.05  ]]--
--[[ by HydrantHunter  ]]--
--[[     aka Dog       ]]--
--[[ pastebin xSHHqL0h ]]--
local gVer = "1.0.05"
--[[
Tested with/requires:
  - Mincraft 1.6.4
  - Latest DeltaSG-Craft or LanteaCraft (snapshot 82)
  - ComputerCraft ver. 1.57+ for MC 1.6.4
    - HTTP API enabled (for installer/pastebin)
    - 1 Advanced Computer (color, mouse), 3 optional Advanced Monitors (color)
    - DHD running on an Advanced Computer with 4 optional Advanced Monitors
      - DHD also supports GopherATL's BioLock ver. 2.1.3 Fistprint scanner (updated for 1.6.4 by gamax92)
]]--
-- AUTOMATIC/STATIC CONFIGURATION (Part 1)
local modem
local modemSide
local thisGate
local gate
local pData
local fuelGuage
local shieldStatus
local gateStatus = "QRY"
local dialAddress = "none"
local currentState = "ZZ"
--local connectTimer = 0
local pollTimer = 0
local timePoller = 0
local longName = ""
local mon = "none"
local gateSettings = { shield = "front",
                       DHD = 1,
                       chan = { send = 1787, recv = 1776 },
                       net = "R",
                       pollTime = 2,
                       history = "/data/DHDhistory",
                       last = "/data/DHDlast",
                     }
-- END AUTOMATIC/STATIC CONFIGURATION (Part 1)

local function ingestData()
  local gateConfig = fs.open("/data/gateSettings","r") or error("Cannot open /data/gateSettings", 2)
  local gateCfg = gateConfig.readAll()
  gateSettings = textutils.unserialize(gateCfg)
  gateConfig.close()
end

local function saveData()
  if not fs.exists("/data") then fs.makeDir("/data") end
  local gateConfig = fs.open("/data/gateSettings","w") or error("Cannot open /data/gateSettings", 2)
  gateConfig.write(textutils.serialize(gateSettings))
  gateConfig.close()
end

local function displayMarque()
  if mon ~= "none" then
    mon.setBackgroundColor(colors.black)
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.cyan)
    mon.write("Stargate")
    mon.setCursorPos(2,2)
    mon.setTextColor(colors.yellow)
    mon.write(longName)
  end
end

local function displayStatus(select)
  if select == "con" then
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    if dialAddress ~= "none" then
      mon.setTextColor(colors.lightBlue)
      mon.write("Connected to")
      mon.setTextColor(colors.yellow)
      mon.setCursorPos(1,2)
      local dA = { }
      for i = 1,#dialAddress do
        dA[i] = dialAddress:sub(i,i)
        mon.write(" " .. dA[i])
      end
    else
      mon.setTextColor(colors.yellow)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    end
  elseif select == "dial" then
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    if dialAddress ~= "none" then
      mon.setTextColor(colors.lightBlue)
      mon.write("Dialing")
      mon.setTextColor(colors.yellow)
      mon.setCursorPos(1,2)
      local dA = { }
      for i = 1,#dialAddress do
        dA[i] = dialAddress:sub(i,i)
        mon.write(" " .. dA[i])
      end
    else
      mon.setTextColor(colors.yellow)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    end
  elseif select == "" or select == nil then
    if gate.isDialing() == true and dialAddress == "" then
      mon.clear()
      mon.setTextScale(2)
      mon.setTextColor(colors.yellow)
      mon.setCursorPos(1,1)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    else
      displayMarque()
    end
  end
end

local function drawTermScreen()
  term.setBackgroundColor(colors.black)
  term.clear()
  if mon == "none" then
    term.setBackgroundColor(colors.lightBlue)
    term.setTextColor(colors.black)
  else
    term.setBackgroundColor(colors.blue)
    term.setTextColor(colors.white)
  end
  if fuelGuage == false then
    term.setBackgroundColor(colors.red)
    term.setTextColor(colors.white)
  end
  term.setCursorPos(2,2)
  term.write(" Gate Liaison          ver. " .. gVer .. " ")
  term.setCursorPos(2,10)
  term.write(string.rep(" ",35))
  term.setCursorPos(2,10)
  term.write(" " .. os.getComputerLabel())
  local cID = tostring(math.floor(os.getComputerID()))
  term.setCursorPos(37-(3+#cID),10)
  term.write("# " .. cID)
  term.setBackgroundColor(colors.lightGray)
  term.setTextColor(colors.black)
  for i = 2,14,1 do
    for j = 3,9,1 do
      term.setCursorPos(i,j)
      term.write(" ")
    end
  end
  term.setCursorPos(2,3)
  term.write(" Gate:")
  term.setCursorPos(2,4)
  term.write(" State:")
  term.setCursorPos(2,5)
  term.write(" Target:")
  term.setCursorPos(2,6)
  term.write(" Shield:")
  term.setCursorPos(2,7)
  term.write(" Fuel:")
  term.setCursorPos(2,8)
  term.write(" Status:")
  term.setCursorPos(2,9)
  term.write(" Network:")
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.yellow)
  term.setCursorPos(17,3)
  term.write(thisGate)
  term.setCursorPos(17,4)
  if gateStatus == "Disconnected" then
    term.setTextColor(colors.green)
  elseif gateStatus == "Connected" then
    term.setTextColor(colors.orange)
  elseif gateStatus == "Dialing" then
    term.setTextColor(colors.lightBlue)
  end
  if gateStatus == "Dialing" and dialAddress == "none" then
    term.write("Incoming Connection")
  else
    term.write(gateStatus)
  end
  term.setCursorPos(17,5)
  term.setTextColor(colors.brown)
  term.write(dialAddress)
  term.setCursorPos(17,6)
  if shieldStatus == true then
    term.setTextColor(colors.green)
    term.write("ON ")
  elseif shieldStatus == false then
    term.setTextColor(colors.orange)
    term.write("OFF")
  else
    term.write("ERR")
  end
  term.setCursorPos(17,7)
  if fuelGuage == true then
    term.setTextColor(colors.green)
    term.write("Yes")
  elseif fuelGuage == false then
    term.setTextColor(colors.red)
    term.write("NO")
  else
    term.setTextColor(colors.magenta)
    term.write("ERROR")
  end
  term.setCursorPos(17,8)
  term.setTextColor(colors.lightBlue)
  term.write(pData)
  term.setCursorPos(17,9)
  if gateSettings.net == "R" then
    term.setTextColor(colors.red)
    term.write("redNet / " .. gateSettings.DHD)
  elseif gateSettings.net == "C" then
    term.setTextColor(colors.green)
    term.write("ccNet / " .. gateSettings.chan.send .. "-" .. gateSettings.chan.recv)
  end
end

local function netSend(dataPack)
  if gateSettings.net == "R" then
    if gateSettings.DHD ~= 999 then
      rednet.send(gateSettings.DHD,dataPack,true)
    end
  elseif gateSettings.net == "C" then
    if gateSettings.chan.recv ~= 2 then
      modem.transmit(gateSettings.chan.send,gateSettings.chan.recv,dataPack)
    end
  end
end

local function updateStatus(special)
  currentState = pData
  fuelGuage = gate.hasFuel()
  shieldStatus = rs.getOutput(gateSettings.shield)
  if gateStatus == "allclear" then
    shieldState = false
    gateStatus = "Disconnected"
    dialAddress = "none"
    if fuelGuage == false then
      pData = "YY0"
    elseif fuelGuage == true then
      pData = "YY1"
    end
  elseif gateStatus == "lockdown" then
    if fuelGuage == false then
      pData = "XX0"
    elseif fuelGuage == true then
      pData = "XX1"
    end
    dialAddress = "none"
  else
    if shieldStatus == true then
      pData = "1"
    else
      pData = "0"
    end
    if gate.isConnected() == true then
      pData = pData .. "1"
      gateStatus = "Connected"
      if mon ~= "none" then
        displayStatus("con")
      end
    elseif gate.isConnected() == false then
      if gate.isDialing() == true then
        pData = pData .. "2"
        gateStatus = "Dialing"
        if mon ~= "none" then
          displayStatus("dial")
        end
      elseif gate.isDialing() == false then
        gateStatus = "Disconnected"
        dialAddress = "none"
        pData = pData .. "0"
      end
    end
    if fuelGuage == false then
      pData = pData .. "0"
    elseif fuelGuage == true then
      pData = pData .. "1"
    end
  end
  if gateStatus ~= "Dialing" and gateStatus ~= "Connected" and gateStatus ~= "lockdown" then displayMarque() end
  if currentState ~= pData or tostring(special) == "QRY" then
    netSend(pData)
    drawTermScreen()
  end
end

local function recordSessionData()  -- Human readable log files (last gate & history)
  if not fs.exists("/data") then fs.makeDir("/data") end
  local dateStamp = textutils.formatTime(os.time(),false) .. " / Day " .. os.day()
  local lastCall = fs.open(gateSettings.last,"w")
  lastCall.writeLine(dateStamp)
  lastCall.writeLine(dialAddress)
  lastCall.close()
  if not fs.exists(gateSettings.history) then
    local tmpHist = fs.open(gateSettings.history,"w")
    tmpHist.close()
  end
  local gateArchive = fs.open(gateSettings.history,"a")
  gateArchive.writeLine(dateStamp)
  gateArchive.writeLine(dialAddress)
  gateArchive.close()
end

local function shieldControl(state)
  if state == "ON" then
    rs.setOutput(gateSettings.shield,true)
  elseif state == "OFF" then
    rs.setOutput(gateSettings.shield,false)
  else
    rs.setOutput(gateSettings.shield,true)
  end
  return
end

local function lockDown()
  gateStatus = "lockdown"
  shieldControl("ON")
  gate.disconnect()
  dialAddress = "none"
  updateStatus()
  if mon ~= "none" then
    mon.clear()
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.red)
    mon.write("!! LOCKDOWN !!")
  end
end

local function dialOut(targetAddress)
  dialAddress = tostring(targetAddress)
  if dialAddress ~= thisGate and tostring(gate.isConnected()) == "false" then -- Is the stargate connected to another stargate?  isConnected()
    local dialGate = gate.dial(dialAddress)
    --if dialGate == true then  -- if dialGate then ??
      gateStatus = "Dialing"
      recordSessionData()
      updateStatus()
      return true
    --elseif tostring(dialGate) == "false" then
      --return false
    --end
  else
    return false
  end
end

local function endCall()
  gate.disconnect()
  sleep(0.5)
  if tostring(gate.isConnected()) == "false" then
    gateStatus = "Disconnected"
    dialAddress = "none"
  end
end

local function doCommand(thisCommand)
  if thisCommand == "lockdown" then
    lockDown()
  elseif thisCommand == "allclear" then
    displayMarque()
    shieldControl("OFF")
    gateStatus = "allclear"
    dialAddress = "none"
    updateStatus()
    return -- ?
  elseif thisCommand == "QRY" then
    updateStatus("QRY")
    return
  elseif thisCommand == "1stRun" then  -- When DHD signifies its first run, it is given the gate's address & ccNet channels
    netSend(thisGate)
    sleep(0.2)                         -- long waits to ensure ccDHD is ready to receive the data
    netSend(gateSettings.chan.recv)
    sleep(0.2)
    netSend(gateSettings.chan.send)
    return
  elseif thisCommand == "redNet" then
    if gateSettings.net == "C" then modem.close(gateSettings.chan.recv) end
    modem = nil
    gateSettings.net = "R"
    rednet.open(modemSide)
    saveData()
    drawTermScreen()
  elseif thisCommand == "ccNet" then
    if gateSettings.net == "R" then rednet.close(modemSide) end
    gateSettings.net = "C"
    modem = peripheral.wrap(modemSide)
    modem.open(gateSettings.chan.recv)
    saveData()
    drawTermScreen()
  elseif thisCommand == "CS" then
    local newCR
    if gateSettings.net == "R" then
      _,newCR = rednet.receive(2)
      gateSettings.chan.recv = newCR
    elseif gateSettings.net == "C" then
      newCR = { os.pullEvent("modem_message") }
      modem.close(gateSettings.chan.recv)
      gateSettings.chan.recv = newCR[5]
      modem.open(gateSettings.chan.recv)
      saveData()
    end
    drawTermScreen()
  elseif thisCommand == "CR" then
    local newCS
    if gateSettings.net == "R" then
      _,newCS = rednet.receive(1)
      gateSettings.chan.send = newCS
    elseif gateSettings.net == "C" then
      newCS = { os.pullEvent("modem_message") }
      gateSettings.chan.send = newCS[5]
      saveData()
    end
    drawTermScreen()
  end                                  -- replaced elseif with end/if - split these into two if/thens
  if gateStatus ~= "lockdown" then
    if thisCommand == "endCall" then
      endCall()
      updateStatus()
      return
    elseif thisCommand == "sON" then
      shieldControl("ON")
      updateStatus()
      return
    elseif thisCommand == "sOFF" then
      shieldControl("OFF")
      updateStatus()
      return
    elseif thisCommand == "restart" or thisCommand == "reset" then
      os.reboot()
    else
      if thisCommand:len() > 6 and thisCommand:len() < 10 and thisCommand ~= "endCall" and thisCommand ~= "lockdown" and thisCommand ~= "allclear" then
        if dialOut(thisCommand) == true then
          gateStatus = "Dialing"
          updateStatus()
          return
        else
          gateStatus = "Disconnected"
          dialAddress = "none"
          updateStatus()
          return
        end
      end
    end
  end
end

local function netReceive()
  while true do
    if gateSettings.net == "R" then
      local eventNet = { rednet.receive() }
      if tonumber(eventNet[1]) == gateSettings.DHD then
        if eventNet[2] ~= nil and eventNet[2] ~= "" then
          doCommand(eventNet[2])
        end
      end
      return
    elseif gateSettings.net == "C" then
      local eventNet = { os.pullEvent("modem_message") }
      if eventNet[3] == gateSettings.chan.recv and eventNet[4] == gateSettings.chan.send then
        if eventNet[5] ~= nil and eventNet[5] ~= "" then
          doCommand(eventNet[5])
        end
      end
    end
  end
end

local function dataPoller()
  while true do
    local timerEvent = { os.pullEvent("timer") }
    if timerEvent[2] == pollTimer then
      timePoller = 0
      updateStatus()
      break
    end
  end
end

local function gateKernel()
  if timePoller == 0 then
    pollTimer = os.startTimer(gateSettings.pollTime)
    timerPoller = 1
  end
  parallel.waitForAny(netReceive,dataPoller)
end

local function firstRun()
  -- Set DHD computer #
  term.clear()
  local ccLabel = os.getComputerLabel()
  if ccLabel == nil or ccLabel == "" then
    os.setComputerLabel("Gate Liaison - cc# " .. os.getComputerID())
  end
  term.setCursorPos(2,2)
  term.setTextColor(colors.white)
  term.write("I am " ..  os.getComputerLabel() .. " / cc# " .. os.getComputerID())
  term.setCursorPos(2,6)
  term.setTextColor(colors.lightBlue)
  term.write("Please enter the number of the ccDHD computer")
  term.setTextColor(colors.white)
  while true do
    term.setCursorPos(2,8)
    term.write("       ")
    term.setCursorPos(2,8)
    local newDHD = tonumber(read())
    if newDHD ~= "" and newDHD ~= nil and newDHD > 0 and newDHD < 999 then
      gateSettings.DHD = newDHD
      break
    end
  end
  term.clear()
  -- Select shield/redstone output side
  term.setCursorPos(2,2)
  term.setTextColor(colors.lightBlue)
  term.write("Please select the shield/redstone output side")
  -- Draw side list
  term.setBackgroundColor(colors.gray)
  for i = 4,16,1 do
    term.setCursorPos(26,i)
    term.write("        ")
  end
  term.setCursorPos(27,5)
  term.setTextColor(colors.white)
  term.write("Top")
  term.setCursorPos(27,7)
  term.write("Bottom")
  term.setCursorPos(27,9)
  term.write("Front")
  term.setCursorPos(27,11)
  term.write("Back")
  term.setCursorPos(27,13)
  term.write("Left")
  term.setCursorPos(27,15)
  term.write("Right")
  while true do
    local newSide = { os.pullEvent("mouse_click") }
    if newSide[3] > 26 and newSide[3] < 34 then
      if newSide[4] == 5 then
        gateSettings.shield = "top"
        break
      elseif newSide[4] == 7 then
        gateSettings.shield = "bottom"
        break
      elseif newSide[4] == 9 then
        gateSettings.shield = "front"
        break
      elseif newSide[4] == 11 then
        gateSettings.shield = "back"
        break
      elseif newSide[4] == 13 then
        gateSettings.shield = "left"
        break
      elseif newSide[4] == 15 then
        gateSettings.shield = "right"
        break
      end
    end
  end
  term.setBackgroundColor(colors.black)
  term.clear()
  saveData()
end

-- AUTOMATIC/STATIC CONFIGURATION (Part 2)
local function initGate()
  thisGate = gate.getAddress()
  fuelGuage = gate.hasFuel()
  local tG = { }
  longName = ""
  for i = 1,thisGate:len(),1 do
    tG[i] = thisGate:sub(i,i)
    if i < thisGate:len() then
      longName = longName .. tG[i] .. " "
    else
      longName = longName .. tG[i]
    end
  end
end

local function initMe()
  if not fs.exists("/data/gateSettings") then firstRun() end
  ingestData()
  shieldStatus = rs.getOutput(gateSettings.shield)
  for k,v in pairs(rs.getSides()) do
        -- Stargate
    if peripheral.getType(v) == "stargate" then
      gate = peripheral.wrap(tostring(v))
      initGate()
    elseif peripheral.getType(v) == "modem" then
        -- Modem/redNet
      if peripheral.call(tostring(v),"isWireless") == true then
        if gateSettings.net == "R" then
          modemSide = v
          rednet.open(v)
        elseif gateSettings.net == "C" then
          modemSide = v
          modem = peripheral.wrap(v)
          modem.open(gateSettings.chan.recv)
        end
        -- Network/ccNet
      elseif peripheral.call(tostring(v),"isWireless") == false then
        -- Monitor
        local mPerps = peripheral.call(tostring(v),"getNamesRemote")
        for num,mPerp in pairs(mPerps) do
          if tostring(mPerp):sub(1,7) == "monitor" then
            mon = peripheral.wrap(mPerp)
          elseif tostring(mPerp):sub(1,8) == "stargate" then
            gate = peripheral.wrap(mPerp)
            initGate()
          end
        end
      end
    end
  end
  if mon ~= "none" then
    displayMarque()
  end
  updateStatus()
end
-- END AUTOMATIC/STATIC CONFIGURATION (Part 2)

initMe()

while true do
  gateKernel()
end
