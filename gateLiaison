--[[ Stargate/Shield   ]]--
--[[     Liaison       ]]--
--[[  version  0.6.28  ]]--
--[[ by HydrantHunter  ]]--
--[[     aka Dog       ]]--
--[[ pastebin xSHHqL0h ]]--
local gVer = "0.6.28"
--[[
Tested with/requires:
  - Mincraft 1.6.4
  - Latest DeltaSG-Craft or LanteaCraft (snapshot 82)
  - ComputerCraft ver. 1.57+ for MC 1.6.4
    - HTTP API enabled
    - 1 Advanced Computer (color, mouse), 3 optional Advanced Monitors (color)
    - DHD running on an Advanced Computer with 4 optional Advanced Monitors

  - DHD also supports GopherATL's BioLock ver. 2.1.3 (updated for 1.6.4 by gamax92)
]]--

--[[
    To Do:
  -- High priority
  -- Low priority
      - try modem wrap and experiment with chan.send & chan.recv
      - re-write with less spaghetti
]]--
--
-- MANUAL CONFIGURATION
--
local gateControl = 1   -- DHD Computer
local shield = "bottom" -- Side for redstone output
local pollTime = 3      -- Seconds b/t status polls
--local chan = { send = 229, rec = 231 }
-- Logs
local lastGate = "/logs/DHDlast"
local gateHistory = "/logs/DHDhistory"
--
-- END MANUAL CONFIGURATION
--
-- AUTOMATIC/STATIC CONFIGURATION (Part 1)
local gate
local thisGate
local dialStatus
local connectStatus
local fuelGuage
local dialAddress = "none"
local gateStatus = "QRY"
local pData
local currentState = "ZZ"
--local connectTimer = 0
local pollTimer = 0
local timePoller = 0
local longName = ""
local mon = "none"
local shieldStatus
-- END AUTOMATIC/STATIC CONFIGURATION (Part 1)

local function displayMarque()
  if mon ~= "none" then
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.cyan)
    mon.write("Stargate")
    mon.setCursorPos(2,2)
    mon.setTextColor(colors.yellow)
    mon.write(longName)
  end
end

local function displayStatus(select)
  if select == "con" then
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.lightBlue)
    if dialAddress ~= "none" then
      mon.write("Connected to")
      mon.setTextColor(colors.yellow)
      mon.setCursorPos(1,2)
      local dA = {}
      for i = 1,#dialAddress do
        dA[i] = dialAddress:sub(i,i)
        mon.write(" " .. dA[i])
      end
    else
      mon.write("Connected")
    end
  elseif select == "dial" then
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.lightBlue)
    mon.write("Dialing")
    mon.setTextColor(colors.yellow)
    mon.setCursorPos(1,2)
    local dA = {}
    for i = 1,#dialAddress do
      dA[i] = dialAddress:sub(i,i)
      mon.write(" " .. dA[i])
    end
  elseif select == "" or select == nil then
    displayMarque()
  end
end

local function drawTermScreen()
  term.setBackgroundColor(colors.black)
  term.clear()
  if mon == "none" then
    term.setBackgroundColor(colors.red)
  else
    term.setBackgroundColor(colors.blue)
  end
  term.setTextColor(colors.white)
  term.setCursorPos(2,2)
  term.write(" Gate Liaison   ver. " .. gVer .. " ")
  term.setCursorPos(2,10)
  term.write("                            ")
  term.setCursorPos(2,10)
  term.write(" " .. os.getComputerLabel())
  local cID = tostring(math.floor(os.getComputerID()))
  term.setCursorPos(30-(3+#cID),10)
  term.write("# " .. cID)
  term.setBackgroundColor(colors.lightGray)
  term.setTextColor(colors.black)
  for i = 2,14,1 do
    for j = 3,9,1 do
      term.setCursorPos(i,j)
      term.write(" ")
    end
  end
  term.setCursorPos(2,3)
  term.write(" Gate:")
  term.setCursorPos(2,4)
  term.write(" State:")
  term.setCursorPos(2,5)
  term.write(" Target:")
  term.setCursorPos(2,6)
  term.write(" Shield:")
  term.setCursorPos(2,7)
  term.write(" Fuel:")
  term.setCursorPos(2,8)
  term.write(" Status:")
  term.setCursorPos(2,9)
  term.write(" ccDHD:")
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.yellow)
  term.setCursorPos(17,3)
  term.write(thisGate)
  term.setCursorPos(17,4)
  if gateStatus == "Disconnected" then
    term.setTextColor(colors.green)
  else
    term.setTextColor(colors.orange)
  end
  term.write(gateStatus)
  term.setCursorPos(17,5)
  term.setTextColor(colors.brown)
  term.write(dialAddress)
  term.setCursorPos(17,6)
  if shieldStatus == true then
    term.setTextColor(colors.green)
    term.write("ON ")
  elseif shieldStatus == false then
    term.setTextColor(colors.orange)
    term.write("OFF")
  else
    term.write("ERR")
  end
  term.setCursorPos(17,7)
  if fuelGuage == true then
    term.setTextColor(colors.green)
    term.write("Yes")
  elseif fuelGuage == false then
    term.setTextColor(colors.red)
    term.write("NO")
  else
    term.setTextColor(colors.magenta)
    term.write("ERROR")
  end
  term.setCursorPos(17,8)
  term.setTextColor(colors.lightBlue)
  term.write(pData)
  term.setCursorPos(17,9)
  term.setTextColor(colors.lightGray)
  term.write(gateControl)
end

local function updateStatus()
  currentState = pData
  connectStatus = gate.isConnected()
  dialStatus = gate.isDialing()
  fuelGuage = gate.hasFuel()
  shieldStatus = rs.getOutput(shield)
  if gateStatus == "allclear" then
    shieldState = false
    gateStatus = "Disconnected"
    dialAddress = "none"
    if fuelGuage == false then
      pData = "YY0"
    elseif fuelGuage == true then
      pData = "YY1"
    end
    rednet.send(gateControl,pData,true)
    return
  elseif gateStatus == "lockdown" then
    if fuelGuage == false then
      pData = "XX0"
    elseif fuelGuage == true then
      pData = "XX1"
    end
    dialAddress = "none"
    rednet.send(gateControl,pData,true)
    return
  else
    if shieldStatus == true then
      pData = "1"
    else
      pData = "0"
    end
    if tostring(connectStatus) == "true" then
      pData = pData .. "1"
      gateStatus = "Connected"
      if mon ~= "none" then
        displayStatus("con")
      end
    elseif tostring(connectStatus) == "false" then
      if gateStatus == "Dialing" or tostring(dialStatus) == "true" then
        pData = pData .. "2"
        if mon ~= "none" then
          displayStatus("dial")
        end
      elseif gateStatus ~= "Dialing" or tostring(dialStatus) == "false" then
        gateStatus = "Disconnected"
        dialAddress = "none"
        pData = pData .. "0"
      end
    end
    if fuelGuage == false then
      pData = pData .. "0"
    elseif fuelGuage == true then
      pData = pData .. "1"
    end
  end
  if gateStatus ~= "Dialing" and gateStatus ~= "Connected" and gateStatus ~= "lockdown" then displayMarque() end
  rednet.send(gateControl,pData,true)
  if currentState ~= pData then
    drawTermScreen()
  end
end

local function recordSessionData()  -- Human readable log files (last gate & history)
  local dateStamp = textutils.formatTime(os.time(),false) .. " / Day " .. os.day()
  local lastCall = fs.open(lastGate,"w")
  lastCall.writeLine(dateStamp)
  lastCall.writeLine(dialAddress)
  lastCall.close()
  if not fs.exists(gateHistory) then
    local tmpHist = fs.open(gateHistory,"w")
    tmpHist.close()
  end
  local gateArchive = fs.open(gateHistory,"a")
  gateArchive.writeLine(dateStamp)
  gateArchive.writeLine(dialAddress)
  gateArchive.close()
end

local function shieldControl(state)
  if state == "ON" then
    rs.setOutput(shield,true)
  elseif state == "OFF" then
    rs.setOutput(shield,false)
  else
    rs.setOutput(shield,true)
  end
  return
end

local function lockDown()
  gateStatus = "lockdown"
  shieldControl("ON")
  gate.disconnect()
  dialAddress = "none"
  updateStatus()
  if mon ~= "none" then
    mon.clear()
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.red)
    mon.write("!! LOCKDOWN !!")
  end
end

local function dialOut(targetAddress)
  dialAddress = tostring(targetAddress)
  connectStatus = gate.isConnected()
  if dialAddress ~= thisGate and tostring(connectStatus) == "false" then -- Is the stargate connected to another stargate?  isConnected()
    --local dialGate = gate.dial(dialAddress)
    --updateStatus()
    --if tostring(dialGate) == "true" then
      gate.dial(dialAddress)
      gateStatus = "Dialing"
      recordSessionData()
      updateStatus()
      return true
    --elseif tostring(dialGate) == "false" then
      --return false
    --end
  else
    return false
  end
end

local function endCall()
  gate.disconnect()
  sleep(0.5)
  if tostring(gate.isConnected()) == "false" then
    gateStatus = "Disconnected"
    dialAddress = "none"
  end
end

local function doCommand(thisCommand)
  if thisCommand == "lockdown" then
    lockDown()
  end
  if thisCommand == "allclear" then
    displayMarque()
    shieldControl("OFF")
    gateStatus = "allclear"
    dialAddress = "none"
    updateStatus()
    return -- ?
  elseif thisCommand == "QRY" then
    updateStatus()
    return
  elseif thisCommand == "1stRun" then  -- When DHD signifies its first run, it is given the gate's address
    rednet.send(gateControl,thisGate,true)
    return
  end                                  -- replaced elseif with end/if - split these into two if/thens
  if gateStatus ~= "lockdown" then
    if thisCommand == "endCall" then
      endCall()
      updateStatus()
      return
    elseif thisCommand == "sON" then
      shieldControl("ON")
      updateStatus()
      return
    elseif thisCommand == "sOFF" then
      shieldControl("OFF")
      updateStatus()
      return
    elseif thisCommand == "restart" or thisCommand == "reset" then
      os.reboot()
    else
      if thisCommand:len() > 6 and thisCommand:len() < 10 and thisCommand ~= "endCall" and thisCommand ~= "lockdown" and thisCommand ~= "allclear" then
        if dialOut(thisCommand) == true then
          gateStatus = "Dialing"
          updateStatus()
          return
        else
          gateStatus = "Disconnected"
          dialAddress = "none"
          updateStatus()
          return
        end
      end
    end
  end
end

local function netReceive()
  while true do
    if not IO then
      eventNet = { rednet.receive() }
      if tonumber(eventNet[1]) == gateControl then
        if eventNet[2] ~= nil and eventNet[2] ~= "" then
          doCommand(eventNet[2])
        end
      end
      return
    else
      eventNet = { os.pullEvent("modem_message") }
      if eventNet[2] == chan.recv and eventNet[3] == chan.send and tonumber(eventNet[4]) == gateControl then
        doCommand(eventNet[5])
      end
    end
  end
end

local function dataPoller()
  while true do
    local timerEvent = { os.pullEvent("timer") }
    if timerEvent[2] == pollTimer then
      timePoller = 0
      updateStatus()
      break
    end
  end
end

local function gateKernel()
  if timePoller == 0 then
    pollTimer = os.startTimer(pollTime)
    timerPoller = 1
  end
  parallel.waitForAny(netReceive,dataPoller)
end

-- AUTOMATIC/STATIC CONFIGURATION (Part 2)
local function initMe()
  if mon ~= "none" then
    mon.setTextScale(2)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.cyan)
  end
  --local sCommandOptions = { "QRY", "sON", "sOFF", "lockdown", "allclear", "reboot", "reset", }
  rs.setOutput(shield,false)
  sleep(0.5)
  rs.setOutput(shield,true)
  shieldStatus = true
  for k,v in pairs(rs.getSides()) do
      -- Stargate
    if peripheral.getType(v) == "stargate" then
      gate = peripheral.wrap(tostring(v))
      thisGate = gate.getAddress()
      dialStatus = gate.isDialing()
      connectStatus = gate.isConnected()
      fuelGuage = gate.hasFuel()
      local tG = {}
      longName = ""
      for i = 1,thisGate:len(),1 do
        tG[i] = thisGate:sub(i,i)
        if i < thisGate:len() then
          longName = longName .. tG[i] .. " "
        else
          longName = longName .. tG[i]
        end
      end
    elseif peripheral.getType(v) == "modem" then
        -- Modem
      if peripheral.call(tostring(v),"isWireless") == true then
        rednet.open(v)
        -- Network
      elseif peripheral.call(tostring(v),"isWireless") == false then
        --local IO = peripheral.wrap("back")
        -- Monitor
        local mPerps = peripheral.call(tostring(v),"getNamesRemote")
        for num,mPerp in pairs(mPerps) do
          if tostring(mPerp):sub(1,7) == "monitor" then
            mon = peripheral.wrap(mPerp)
          end
        end
      end
    end
  end
end
-- END AUTOMATIC/STATIC CONFIGURATION (Part 2)

initMe()
displayMarque()
updateStatus()

while true do
  gateKernel()
end
