--[[  LanteaCraft      ]]--
--[[    Gate Liaison   ]]--
--[[ by HydrantHunter  ]]--
--[[     aka Dog       ]]--
--[[  with help from   ]]--
--[[  AfterLifeLochie  ]]--
--[[ pastebin xSHHqL0h ]]--
--[[      GPL v3       ]]--
local gVer = "1.0.25"
--[[
Tested with/requires:
  - Mincraft 1.6.4
  - LanteaCraft (snapshot 82+ & RC1_15+)
  - ComputerCraft ver. 1.57+ for MC 1.6.4
    - HTTP API enabled (for pastebin installer - not required for gateLiaison)
    - 1 Advanced Computer (color), 3 optional Advanced Monitors (color)
      - or 1 Advanced Wireless Turtle (color), no monitors
    - ccDHD running on an Advanced Computer with 4 optional Advanced Monitors
      - ccDHD also supports GopherATL's BioLock ver. 2.1.3 Fistprint scanner (updated for 1.6.4 by gamax92)
]]--
-- AUTOMATIC/STATIC CONFIGURATION (Part 1)
local modem, modemSide
local gate, thisGate
local fuelGuage, shieldStatus
local pData
local gateStatus = "QRY"
local dialAddress = "none"
local currentState = "ZZ"
local pollTimer, timePoller = 0,0
local longName = ""
local mon = "none"
local gateSettings = { shield = "front",
                       DHD = 1,
                       chan = { send = 1787, recv = 1776 },
                       net = "C",
                       pollTime = 2,
                       last = "/data/lastCall",
                     }
-- END AUTOMATIC/STATIC CONFIGURATION (Part 1)

local function ingestData()
  local gateConfig = fs.open("/data/gateSettings","r") or error("ingestData(): Unable to open /data/gateSettings for reading", 2)
  local gateCfg = gateConfig.readAll()
  gateSettings = textutils.unserialize(gateCfg)
  gateConfig.close()
end

local function saveData()
  if not fs.exists("/data") then fs.makeDir("/data") end
  local gateConfig = fs.open("/data/gateSettings","w") or error("saveData(): Unable to open /data/gateSettings for writing", 2)
  gateConfig.write(textutils.serialize(gateSettings))
  gateConfig.close()
end

local function displayMarquee() -- Display the local address when there is no other information to display
  if mon == "none" then return end
  mon.setBackgroundColor(colors.black)
  mon.clear()
  mon.setTextScale(2)
  mon.setCursorPos(1,1)
  mon.setTextColor(colors.cyan)
  mon.write("Stargate")
  mon.setTextColor(colors.yellow)
  if #thisGate > 7 then
    mon.setCursorPos(4,2)
  else
    mon.setCursorPos(2,2)
  end
  mon.write(longName)
end

local function displayStatus(select)
  if mon == "none" then return end
  if select == "con" then       -- Connection status - dialAddress or incoming
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    if dialAddress ~= "none" then -- dialAddress
      mon.setTextColor(colors.lightBlue)
      mon.write("Connected to")
      mon.setTextColor(colors.yellow)
      if #dialAddress > 7 then
        mon.setCursorPos(4,2)
        mon.write(dialAddress)
      else                      -- incoming
        mon.setCursorPos(1,2)
        local dA = { }
        for i = 1,#dialAddress do
          dA[i] = dialAddress:sub(i,i)
          mon.write(" " .. dA[i])
        end
      end
    else
      mon.setTextColor(colors.yellow)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    end
  elseif select == "dial" then  -- Dial status - dialAddress or incoming
    mon.clear()
    mon.setTextScale(2)
    mon.setCursorPos(1,1)
    if dialAddress ~= "none" then
      mon.setTextColor(colors.lightBlue)
      mon.write("Dialing")
      mon.setTextColor(colors.yellow)
      if #dialAddress > 7 then
        mon.setCursorPos(4,2)
        mon.write(dialAddress)  -- dialAddress (8+ symbols)
      else                      -- or longName (7 symbols)
        mon.setCursorPos(1,2)
        local dA = { }
        for i = 1,#dialAddress do
          dA[i] = dialAddress:sub(i,i)
          mon.write(" " .. dA[i])
        end
      end
    else                        -- incoming
      mon.setTextColor(colors.yellow)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    end
  elseif select == "" or select == nil then -- Non-specified status - incoming or marque
    if gate.isDialing() == true and dialAddress == "" then -- incoming
      mon.clear()
      mon.setTextScale(2)
      mon.setTextColor(colors.yellow)
      mon.setCursorPos(1,1)
      mon.write(" Incoming")
      mon.setCursorPos(4,2)
      mon.write("Connection")
    else
      displayMarquee()          -- marque
    end
  end
end

local function drawTermScreen()
  term.setBackgroundColor(colors.black)
  term.clear()
  if mon == "none" then
    term.setBackgroundColor(colors.lightBlue)
    term.setTextColor(colors.black)
  else
    term.setBackgroundColor(colors.blue)
    term.setTextColor(colors.white)
  end
  if fuelGuage == false then
    term.setBackgroundColor(colors.red)
    term.setTextColor(colors.white)
  end
  term.setCursorPos(2,2)
  term.write(" Gate Liaison            ver. " .. gVer .. " ")
  term.setCursorPos(2,10)
  term.write(string.rep(" ",37))
  term.setCursorPos(2,10)
  term.write(" " .. os.getComputerLabel())
  local cID = tostring(os.getComputerID())
  term.setCursorPos(39-(6+#cID),10)
  term.write("cc # " .. cID)
  term.setBackgroundColor(colors.lightGray)
  term.setTextColor(colors.black)
  for i = 2,14,1 do
    for j = 3,9,1 do
      term.setCursorPos(i,j)
      term.write(" ")
    end
  end
  local readouts = { " Gate:", " State:", " Target:",  " Iris:", " Fuel:", " Status:", " Network:" }
  for i = 1,7,1 do
    term.setCursorPos(2,i+2)
    term.write(readouts[i])
  end
  if #thisGate == 7 then
    term.setCursorPos(2,6)
    term.write(" Shield:")
  end
  term.setCursorPos(17,3)
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.yellow)
  term.write(thisGate)
  term.setCursorPos(17,4)
  term.setTextColor(colors.blue)
  if gateStatus == "Disconnected" then
    term.setTextColor(colors.green)
  elseif gateStatus == "Connected" then
    term.setTextColor(colors.orange)
  elseif gateStatus == "Dialing" then
    term.setTextColor(colors.lightBlue)
  end
  if gateStatus == "Dialing" and dialAddress == "none" then
    term.write("Incoming Connection")
  elseif gateStatus == "lockdown" then
    term.setTextColor(colors.red)
    term.write("!! LOCKDOWN !!")
  else
    term.write(gateStatus)
  end
  term.setCursorPos(17,5)
  term.setTextColor(colors.brown)
  term.write(dialAddress)
  term.setCursorPos(17,6)
  if shieldStatus == true then
    term.setTextColor(colors.green)
    if #thisGate == 7 then
      term.write("ON    ")
    elseif #thisGate > 7 then
      term.write("CLOSED")
    end
  elseif shieldStatus == false then
    term.setTextColor(colors.orange)
    if #thisGate == 7 then
      term.write("OFF   ")
    elseif #thisGate > 7 then
      term.write("OPEN  ")
    end
  else
    term.setTextColor(colors.magenta)
    term.write("ERROR ")
  end
  term.setCursorPos(17,7)
  if fuelGuage == true then
    term.setTextColor(colors.green)
    term.write("YES  ")
  elseif fuelGuage == false then
    term.setTextColor(colors.red)
    term.write("NO   ")
  else
    term.setTextColor(colors.magenta)
    term.write("ERROR")
  end
  term.setCursorPos(17,8)
  term.setTextColor(colors.lightBlue)
  term.write(pData)
  term.setCursorPos(17,9)
  if gateSettings.net == "R" then
    term.setTextColor(colors.red)
    term.write("redNet   ")
    term.setTextColor(colors.gray)
    term.write("ccDHD ")
    term.setTextColor(colors.red)
    term.write(tostring(gateSettings.DHD))
  elseif gateSettings.net == "C" then
    term.setTextColor(colors.green)
    term.write("ccNet ")
    term.setTextColor(colors.gray)
    term.write("s:")
    term.setTextColor(colors.green)
    term.write(tostring(gateSettings.chan.send))
    term.setTextColor(colors.gray)
    term.write(" r:")
    term.setTextColor(colors.green)
    term.write(tostring(gateSettings.chan.recv))
  end
end

local function netSend(dataPack)
  if gateSettings.net == "R" then
    if gateSettings.DHD ~= 999 then
      rednet.send(gateSettings.DHD,dataPack,true)
    end
  elseif gateSettings.net == "C" then
    if gateSettings.chan.recv ~= 2 then
      modem.transmit(gateSettings.chan.send,gateSettings.chan.recv,dataPack)
    end
  end
end

local function updateStatus(special)
  currentState = pData
  fuelGuage = gate.hasFuel()
  if #thisGate == 7 then    -- snapshot 82+ (7 symbols)
    shieldStatus = rs.getOutput(gateSettings.shield)
  elseif #thisGate > 7 then -- RC1 (8+ symbols)
    if gateSettings.shield == "iris" then
      shieldStatus, _ = { pcall(gate.isIrisClosed) }
    else
      shieldStatus = rs.getOutput(gateSettings.shield)
    end
  end
  if gateStatus == "allclear" then
    shieldState = false
    if gate.isConnected() then
      gateStatus = "Connected"
    else
      gateStatus = "Disconnected"
      dialAddress = "none"
    end
    if fuelGuage == false then
      pData = "YY0"
    elseif fuelGuage == true then
      pData = "YY1"
    end
  elseif gateStatus == "lockdown" then
    if fuelGuage == false then
      pData = "XX0"
    elseif fuelGuage == true then
      pData = "XX1"
    end
    dialAddress = "none"
  else
    if shieldStatus == true then
      pData = "1"
    else
      pData = "0"
    end
    if gate.isDialing() == true then
      pData = pData .. "2"
      gateStatus = "Dialing"
      if mon ~= "none" then
        displayStatus("dial")
      end
    elseif gate.isDialing() == false then
      if gate.isConnected() == true then
        pData = pData .. "1"
        gateStatus = "Connected"
        if mon ~= "none" then
          displayStatus("con")
        end
      elseif gate.isConnected() == false then
        gateStatus = "Disconnected"
        dialAddress = "none"
        pData = pData .. "0"
      end
    end

    if fuelGuage == false then
      pData = pData .. "0"
    elseif fuelGuage == true then
      pData = pData .. "1"
    end
  end
  if gateStatus ~= "Dialing" and gateStatus ~= "Connected" and gateStatus ~= "lockdown" then displayMarquee() end
  if currentState ~= pData or tostring(special) == "QRY" then
    netSend(pData)
    drawTermScreen()
  end
end

local function recordSessionData()  -- Human readable log files (last gate & history)
  if not fs.exists("/data") then fs.makeDir("/data") end
  local dateStamp = textutils.formatTime(os.time(),false) .. " / Day " .. os.day()
  local lastCall = fs.open(gateSettings.last,"w")
  lastCall.writeLine(dateStamp)
  lastCall.writeLine(dialAddress)
  lastCall.close()
end

local function shieldControl(state)
  if state == "ON" then
    if #thisGate == 7 then    -- snapshot 82+ (7 symbols)
      rs.setOutput(gateSettings.shield,true)
    elseif #thisGate > 7 then -- RC1 (8+ symbols)
      if gateSettings.shield == "iris" then
        pcall(gate.irisClose)
      else
        rs.setOutput(gateSettings.shield,true)
      end
    end
    return
  elseif state == "OFF" then
    if #thisGate == 7 then    -- snapshot 82+ (7 symbols)
      rs.setOutput(gateSettings.shield,false)
    elseif #thisGate > 7 then -- RC1 (8+ symbols)
      if gateSettings.shield == "iris" then
        pcall(gate.irisOpen)
      else
        rs.setOutput(gateSettings.shield,false)
      end
    end
    return
  end
end

local function lockDown()
  gateStatus = "lockdown"
  shieldControl("ON")
  if #thisGate > 7 then     -- RC1 (8+ symbols)
    local onHook, _ = pcall(gate.disconnect)
    if onHook then
      dialAddress = "none"
    end
  elseif #thisGate == 7 then -- snapshot 82+ (7 symbols)
    gate.disconnect()
    dialAddress = "none"
  end
  updateStatus()
  if mon ~= "none" then
    mon.clear()
    mon.setCursorPos(1,1)
    mon.setTextColor(colors.red)
    mon.write("!! LOCKDOWN !!")
  end
end

local function dialOut(targetAddress)
  dialAddress = tostring(targetAddress)
  local dialGate, _ = pcall(gate.dial,dialAddress)
  if dialGate then
    gateStatus = "Dialing"
    recordSessionData()
    updateStatus()
  end
  return dialGate
end

local function endCall()
  local hangUp, _ = pcall(gate.disconnect)
  if hangUp then
    gateStatus = "Disconnected"
    dialAddress = "none"
  end
end

local function doCommand(thisCommand)
  if thisCommand == "lockdown" then
    lockDown()
    return
  elseif thisCommand == "allclear" then
    displayMarquee()
    shieldControl("OFF")
    gateStatus = "allclear"
    dialAddress = "none"
    updateStatus()
    return
  elseif thisCommand == "QRY" then
    updateStatus("QRY")
    return
  elseif thisCommand == "1stRun" then -- When ccDHD signifies its first run...
    while true do
      local myBoss = { os.pullEvent("modem_message") }  -- ...it then sends it's cc# and waits for the gate's address & cc #
      if myBoss[3] == gateSettings.chan.recv and myBoss[4] == gateSettings.chan.send then
        gateSettings.DHD = myBoss[5]
        saveData()
        break
      end
    end
    local me = os.getComputerID()
    local tempSettings = { gate = thisGate, server = me }
    sleep(0.1)
    netSend(tempSettings)
    return
  elseif thisCommand == "redNet" then -- change to redNet
    if gateSettings.net == "C" then modem.close(gateSettings.chan.recv) end
    modem = nil
    gateSettings.net = "R"
    rednet.open(modemSide)
    saveData()
    drawTermScreen()
  elseif thisCommand == "ccNet" then  -- change to ccNet
    if gateSettings.net == "R" then rednet.close(modemSide) end
    gateSettings.net = "C"
    modem = peripheral.wrap(modemSide)
    modem.open(gateSettings.chan.recv)
    saveData()
    drawTermScreen()
  elseif thisCommand == "CS" then     -- change ccNet Receive Channel
    local newCR = { os.pullEvent("modem_message") }
    modem.close(gateSettings.chan.recv)
    gateSettings.chan.recv = newCR[5]
    modem.open(gateSettings.chan.recv)
    saveData()
    drawTermScreen()
  elseif thisCommand == "CR" then     -- change ccNet Send Channel
    local newCS = { os.pullEvent("modem_message") }
    gateSettings.chan.send = newCS[5]
    saveData()
    drawTermScreen()
  end
  if gateStatus ~= "lockdown" then
    if thisCommand == "endCall" then
      endCall()
      updateStatus()
      return
    elseif thisCommand == "sON" then
      shieldControl("ON")
      updateStatus()
      return
    elseif thisCommand == "sOFF" then
      shieldControl("OFF")
      updateStatus()
      return
    elseif thisCommand == "restart" or thisCommand == "reset" then
      os.reboot()
    else
      if dialOut(thisCommand) then
        gateStatus = "Dialing"
        updateStatus()
        return
      else
        gateStatus = "Disconnected"
        dialAddress = "none"
        updateStatus()
        return
      end
    end
  end
end

local function netReceive()
  while true do
    if gateSettings.net == "R" then
      local eventNet = { rednet.receive() }
      if tonumber(eventNet[1]) == gateSettings.DHD then
        if eventNet[2] ~= nil and eventNet[2] ~= "" then
          doCommand(eventNet[2])
        end
      end
      return
    elseif gateSettings.net == "C" then
      local eventNet = { os.pullEvent("modem_message") }
      if eventNet[3] == gateSettings.chan.recv and eventNet[4] == gateSettings.chan.send then
        if eventNet[5] ~= nil and eventNet[5] ~= "" then
          doCommand(eventNet[5])
        end
      end
      return
    end
  end
end

local function dataPoller()
  while true do
    local timerEvent = { os.pullEvent("timer") }
    if timerEvent[2] == pollTimer then
      timePoller = 0
      updateStatus()
      break
    end
  end
end

local function gateKernel()
  if timePoller == 0 then
    pollTimer = os.startTimer(gateSettings.pollTime)
    timerPoller = 1
  end
  parallel.waitForAny(netReceive,dataPoller)
end

local function firstRun()
  -- Set computer label
  local ccLabel = os.getComputerLabel()
  if ccLabel == nil or ccLabel == "" or ccLabel == "Gate" then
    os.setComputerLabel(thisGate .. " gate")
  end
  term.clear()
  -- Select shield/redstone output side
  --if #thisGate == 7 then                              -- implement when iris control is introduced?
    term.setCursorPos(2,2)
    term.setTextColor(colors.lightBlue)
    term.write("Please select the shield/redstone output side")
    -- Draw side list
    local tPos = { }
    local tSide = { }
    if #thisGate == 7 then
      tPos = { 5,7,9,11,13,15 }
      tSide = { "top","bottom","front","back","left","right" }
    elseif #thisGate > 7 then
      tPos = { 5,7,9,11,13,15 }
      tSide = { "top","bottom","front","back","left","right" }
      --tPos = { 5,7,9,11,13,15,17 }
      --tSide = { "top","bottom","front","back","left","right","iris" }
    end
    term.setBackgroundColor(colors.gray)
    term.setTextColor(colors.white)
    if #thisGate == 7 then                              --
      for i = 4,16,1 do                                 -- Draw blank menu (snapshot 82+)
        term.setCursorPos(26,i)                         --
        term.write(string.rep(" ",8))                   --
      end
    elseif #thisGate > 7 then                           --
      --for i = 4,18,1 do                               --
      for i = 4,16,1 do                                 -- Draw blank menu (RC1)
        term.setCursorPos(26,i)                         --
        term.write(string.rep(" ",8))                   --
      end
    end
    for j,k in pairs(tSide) do                          --
      term.setCursorPos(27,tPos[j])                     -- Draw side labels in menu
      term.write(string.upper(k):sub(1,1) .. k:sub(2) ) --
    end
    while true do
      local newSide = { os.pullEvent("mouse_click") }   --
      if newSide[3] > 26 and newSide[3] < 34 then       --
        for j,k in pairs(tSide) do                      -- Select shield (redstone output) side
          if newSide[4] == tPos[j] then                 --          or internal iris
            gateSettings.shield = k                     --
            return false                                --
          end
        end
      end
    end
  --end
end

-- AUTOMATIC/STATIC CONFIGURATION (Part 2)
local function initGate()
  for k,v in pairs(rs.getSides()) do
        -- Stargate
    if peripheral.getType(v) == "stargate" then
      if not gate then
        gate = peripheral.wrap(tostring(v))
        break
      end
    elseif peripheral.getType(v) == "modem" then
      if peripheral.call(tostring(v),"isWireless") == false then
        local mPerps = peripheral.call(tostring(v),"getNamesRemote")
        for num,mPerp in pairs(mPerps) do
          if tostring(mPerp):sub(1,8) == "stargate" then
            if not gate then
              gate = peripheral.wrap(mPerp)
              break
            end
          end
        end
      end
    end
  end
  thisGate = gate.getAddress()
  fuelGuage = gate.hasFuel()
  if #thisGate > 7 then
    longName = thisGate
  else
    local tG = { }
    longName = ""
    for i = 1,#thisGate,1 do
      tG[i] = thisGate:sub(i,i)
      if i < #thisGate then
        longName = longName .. tG[i] .. " "
      else
        longName = longName .. tG[i]
      end
    end
  end
end

local function initMe()
  initGate()
  -- Check for first time install
  if not fs.exists("/data/gateSettings") then
    firstRun()
    term.setBackgroundColor(colors.black)
    term.clear()
    saveData()
  end
  ingestData()
  for k,v in pairs(rs.getSides()) do
        -- Modem/redNet
    if peripheral.getType(v) == "modem" then
      if peripheral.call(tostring(v),"isWireless") == true then
        if gateSettings.net == "R" then
          modemSide = v
          rednet.open(v)
        -- Network/ccNet
        elseif gateSettings.net == "C" then
          modemSide = v
          modem = peripheral.wrap(v)
          modem.open(gateSettings.chan.recv)
        end
        -- Monitor / Stargate
      elseif peripheral.call(tostring(v),"isWireless") == false then
        local mPerps = peripheral.call(tostring(v),"getNamesRemote")
        for num,mPerp in pairs(mPerps) do
          if tostring(mPerp):sub(1,7) == "monitor" then
            mon = peripheral.wrap(mPerp)
          end
        end
      end
    end
  end
  if #thisGate == 7 then
    shieldStatus = rs.getOutput(gateSettings.shield)
  elseif #thisGate > 7 then
    if gateSettings.shield == "iris" then
      shieldStatus, _ = { pcall(gate.isIrisClosed) }
    else
      shieldStatus = rs.getOutput(gateSettings.shield)
    end
  end
  if mon ~= "none" then
    displayMarquee()
  end
  updateStatus()
end
-- END AUTOMATIC/STATIC CONFIGURATION (Part 2)

initMe()

while true do
  gateKernel()
end
