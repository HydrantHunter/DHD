--[[    STARGATE       ]]--
--[[      c c D H D    ]]--
--[[    ver. 1.0.00    ]]--
--[[  core ver. 4.3.2  ]]--
--[[   ui ver. 4.1.4   ]]--
--[[ by HydrantHunter  ]]--
--[[     aka Dog       ]]--
--[[ pastebin vMtcSz2e ]]--
local ccDHDVer = "1.0.00"
--[[
Tested with/requires:
  - Mincraft 1.6.4
  - Latest DeltaSG-Craft or LanteaCraft (snapshot 82)
  - ComputerCraft ver. 1.57+ for MC 1.6.4
    - HTTP API enabled (for installer/pastebin)
    - 1 Advanced Computer (color, mouse), 4 optional Advanced Monitors (color, touch)
    - gateLiaison running on an Advanced Computer with 3 optional Advanced Monitors

  - DHD also supports the FistPrint Scanner in GopherATL's Biolock MOD ver. 2.1.3 (updated for 1.6.4 by gamax92)
]]--

if os.clock() < 1 then
  sleep(1)
end

local tArgs = { ... }
-- Automatic/Static Configuration
-- Peripherals
local monA = "none"
local monB = "none"
local termX,termY = term.getSize()
local modem  -- Modem (for ccNet)
-- Default Settings
local settingsData = "/data/DHDsettings"
local dhdSettings = { thisGate="GATEONE",
                      password="password",
                      monA="none",
                      monB="none",
                      ["bio"]={lock="none",side="none",func="none",auth=4,},
                      net="R",
                      rednet="none",
                      server=999,
                      ccnet="none",
                      ["channels"]={["send"]=65534,["recv"]=65535,},
                      uptime="OFF",
                      gps="OFF",
                      ["loc"]={["x"]=99999,["y"]=99999,["z"]=99999,["dim"]=0,},
                      ecShield="ON",
                      startShield="ON",
                      callEnd="OFF",
                      logs="OFF",
                      lastGate="/data/DHDlast",
                      gateHistory="/data/DHDhistory",
                      gateData = "/data/DHDgates",
                    }
local allGates = { {addr="NEWGATE",rating="U",note="short note",["loc"]={["x"]=99999,["y"]=99999,["z"]=99999,["dim"]=1,},}, }
local gateLiaison = dhdSettings.server
local longName
local fuelGuage
local fistAuth = false
 -- 'Static' Menu Options
local dhdCommandOptions = { " D I A L", " E D I T", " T R I M", "Shield", "END Call", "LOCKDOWN", "rCmd", "+ Entry", "Save", "- Undo -", "-COMMIT-" }
local passSymbols = { "!", "@", "#", "$", "%", "*", "?", "x", "X" }
local tY
 -- Status Info
local runState = "init"
local tempState
local shieldStatus = "QRY"
local gateStatus = "QRY"
local secureStatus = "QRY"
local screenState = "list"
local menuState = false
local kernelState = true
local currentState = "ZZ"
local configChange = false
local gateChange = false
local trimChange = false
local dialAddress
local currentEdit
 -- Gate List
local zPos = { }
local numGates = 1
local numPages = 1
local pageNum = 1
local listPages = 1
local listPage = 1
 -- Color Definitions
local white = colors.white
local lgray = colors.lightGray
local gray = colors.gray
local black = colors.black
local brown = colors.brown
local yellow = colors.yellow
local orange = colors.orange
local red = colors.red
local magenta = colors.magenta
local purple = colors.purple
local blue = colors.blue
local lblue = colors.lightBlue
local cyan = colors.cyan
local lime = colors.lime
local green = colors.green
-- End Configuration

local function updateInfo(newInfo)    -- Update status
  if tostring(newInfo) ==  "000" then -- bit/trit/bit
    shieldStatus = "OFF"              -- 1st/bit = shield
    gateStatus = "Disconnected"       -- 2nd/trit = connection/dialing
    secureStatus = "allclear"
    fuelGuage = false                 -- 3rd/bit = fuel
    dialAddress = ""
  elseif tostring(newInfo) ==  "001" then
    shieldStatus = "OFF"
    gateStatus = "Disconnected"
    secureStatus = "allclear"
    fuelGuage = true
    dialAddress = ""
  elseif tostring(newInfo) ==  "010" then
    shieldStatus = "OFF"
    gateStatus = "Connected"
    secureStatus = "allclear"
    fuelGuage = false
  elseif tostring(newInfo) ==  "011" then
    shieldStatus = "OFF"
    gateStatus = "Connected"
    secureStatus = "allclear"
    fuelGuage = true
  elseif tostring(newInfo) ==  "020" then
    shieldStatus = "OFF"
    gateStatus = "Dialing"
    secureStatus = "allclear"
    fuelGuage = false
  elseif tostring(newInfo) ==  "021" then
    shieldStatus = "OFF"
    gateStatus = "Dialing"
    secureStatus = "allclear"
    fuelGuage = true
  elseif tostring(newInfo) ==  "100" then
    shieldStatus = "ON"
    gateStatus = "Disconnected"
    secureStatus = "allclear"
    dialAddress = ""
    fuelGuage = false
  elseif tostring(newInfo) ==  "101" then
    shieldStatus = "ON"
    gateStatus = "Disconnected"
    secureStatus = "allclear"
    dialAddress = ""
    fuelGuage = true
  elseif tostring(newInfo) ==  "110" then
    shieldStatus = "ON"
    gateStatus = "Connected"
    secureStatus = "allclear"
    fuelGuage = false
  elseif tostring(newInfo) ==  "111" then
    shieldStatus = "ON"
    gateStatus = "Connected"
    secureStatus = "allclear"
    fuelGuage = true
  elseif tostring(newInfo) ==  "120" then
    shieldStatus = "ON"
    gateStatus = "Dialing"
    secureStatus = "allclear"
    fuelGuage = false
  elseif tostring(newInfo) ==  "121" then
    shieldStatus = "ON"
    gateStatus = "Dialing"
    secureStatus = "allclear"
    fuelGuage = true
  elseif tostring(newInfo) ==  "Dialing" then
    gateStatus = "Dialing"
    secureStatus = "allclear"
  elseif tostring(newInfo) ==  "YY0" then
    secureStatus = "allclear"
    shieldStatus = "OFF"
    gateStatus = "Disconnected"
    fuelGuage = false
    dialAddress = ""
    term.setBackgroundColor(black)
    term.clear()
  elseif tostring(newInfo) ==  "YY1" then
    secureStatus = "allclear"
    shieldStatus = "OFF"
    gateStatus = "Disconnected"
    fuelGuage = true
    dialAddress = ""
    term.setBackgroundColor(black)
    term.clear()
  elseif tostring(newInfo) ==  "XX0" then
    secureStatus = "lockdown"
    shieldStatus = "ON"
    gateStatus = "Disconnected"
    fuelGuage = false
    dialAddress = ""
  elseif tostring(newInfo) ==  "XX1" then
    secureStatus = "lockdown"
    shieldStatus = "ON"
    gateStatus = "Disconnected"
    fuelGuage = true
    dialAddress = ""
  end
  currentState = tostring(newInfo)
  drawCLI()
  return
end

local function netSend(dataPack)
  if dhdSettings.net == "R" then
    if dhdSettings.server ~= 999 then
      rednet.send(gateLiaison,dataPack,true)
    end
  elseif dhdSettings.net == "C" then
    if dhdSettings.channels.recv ~= 65535 then
      modem.transmit(dhdSettings.channels.send,dhdSettings.channels.recv,dataPack)
    end
  end
end

local function netReceive()
  while true do
    if dhdSettings.net == "R" then
      if dhdSettings.server ~= 999 then
        local netEvent = { rednet.receive() }
        if tonumber(netEvent[1]) == gateLiaison then
          if currentState ~= netEvent[2] then
            updateInfo(netEvent[2])
          end
        end
      end
    elseif dhdSettings.net == "C" then
      if dhdSettings.channels.recv ~= 65535 then
        local netEvent = { os.pullEvent("modem_message") }
        if netEvent[3] == dhdSettings.channels.recv and netEvent[4] == dhdSettings.channels.send then
          if currentState ~= netEvent[5] then
            updateInfo(netEvent[5])
          end
        end
      end
    end
  end
end

local function ingestData(fileName,fileType)
  local dhdConfig = fs.open(tostring(fileName),"r") or error("Cannot open " .. fileName, 2)
  local dhdCfg = dhdConfig.readAll()
  if fileType == "cfg" then
    dhdSettings = textutils.unserialize(dhdCfg)
    dhdConfig.close()
    gateLiaison = dhdSettings.server
    if dhdSettings.monA ~= "none" then
      monA = peripheral.wrap(dhdSettings.monA)
    end
    if dhdSettings.monB ~= "none" then
      monB = peripheral.wrap(dhdSettings.monB)
    end
    if dhdSettings.net == "R" and dhdSettings.rednet ~= "none" then
      rednet.open(dhdSettings.rednet)
    elseif dhdSettings.net == "C" and dhdSettings.ccnet ~= "none" then
      modem = peripheral.wrap(dhdSettings.ccnet)
      modem.open(dhdSettings.channels.recv)
    end
    if dhdSettings.bio.lock ~= "none" then
    end
    local tG = { }
    longName = ""
    for i = 1,dhdSettings.thisGate:len(),1 do
      tG[i] = dhdSettings.thisGate:sub(i,i)
      if i < dhdSettings.thisGate:len() then
        longName = longName .. tG[i] .. " "
      else
        longName = longName .. tG[i]
      end
    end
  elseif fileType == "gate" then
    allGates = textutils.unserialize(dhdCfg)
    dhdConfig.close()
    local iCount = 0
    numGates = #allGates
    numPages = math.ceil(numGates / 24)
    listPages = math.ceil(numGates / 8)
  end
end

local function saveData(filename,filetype)
  menuState = false
  if not fs.exists("/data") then fs.makeDir("/data") end
  local dhdConfig = fs.open(tostring(filename),"w") or error("Cannot open " .. filename, 2)
  if filetype == "cfg" then
    dhdConfig.write(textutils.serialize(dhdSettings))
  elseif filetype == "gate" then
    dhdConfig.write(textutils.serialize(allGates))
  end
  dhdConfig.close()
end

local function recordSessionData()  -- Human readable log files (last gate & history)
  if not fs.exists("/data") then fs.makeDir("/data") end
  local dateStamp = tostring(textutils.formatTime(os.time(),false) .. " / Day " .. os.day())
  local lastCall = fs.open(dhdSettings.lastGate,"w")
  lastCall.writeLine(dateStamp)
  lastCall.writeLine(dialAddress)
  lastCall.close()
  if not fs.exists(dhdSettings.gateHistory) then
    local tmpHist = fs.open(dhdSettings.gateHistory,"w")
    tmpHist.close()
  end
  local gateArchive = fs.open(dhdSettings.gateHistory,"a")
  gateArchive.writeLine(dateStamp)
  gateArchive.writeLine(dialAddress)
  gateArchive.close()
end

local function localInventory()
  dhdSettings.monA="none"
  dhdSettings.monB="none"
  dhdSettings.bio.lock="none"
  dhdSettings.bio.side="none"
  dhdSettings.bio.func="none"
  dhdSettings.net="R"
  dhdSettings.rednet="none"
  dhdSettings.server=999
  dhdSettings.ccnet="none"
  dhdSettings.channels={["send"]=65534,["recv"]=65535,}
  dhdSettings.uptime="OFF"
  dhdSettings.gps="OFF"
  dhdSettings.loc={["x"]=99999,["y"]=99999,["z"]=99999,["dim"]=0,}
  dhdSettings.ecShield="ON"
  dhdSettings.startShield="ON"
  dhdSettings.callEnd="OFF"
  dhdSettings.logs="OFF"
  dhdSettings.lastGate="/data/DHDlast"
  dhdSettings.gateHistory="/data/DHDhistory"
  dhdSettings.gateData="/data/DHDgates"
  local side, perp
  for _,side in pairs(rs.getSides()) do
    if peripheral.isPresent(tostring(side)) then
      local perp = peripheral.getType(tostring(side))
      if tostring(perp) == "modem" then
        if peripheral.call(tostring(side),"isWireless") == true and dhdSettings.net == "R" then
          rednet.open(side)
          dhdSettings.rednet = side
          dhdSettings.ccnet = side
        elseif peripheral.call(tostring(side),"isWireless") == true and dhdSettings.net == "C" then
          modem = peripheral.wrap(side)
          modem.open(dhdSettings.channels.recv)
          dhdSettings.ccnet = side
        end
      end
      if tostring(perp) == "monitor" then
        local tmX, tmY = peripheral.call(side,"getSize")
        if tmX == 7 or tmX == 15 then
          dhdSettings.monA = side
        elseif tmX == 14 or tmX == 45 then
          dhdSettings.monB = side
        end
      end
      if tostring(perp) == "biolock" then
        dhdSettings.bio.lock = "OFF"
        dhdSettings.bio.side = side
      end
    end
  end
  saveData(settingsData,"cfg")
  freshLocalData = true
end

local function assignColor(gateNumber)
  local colorBurst = { B = blue, H = lblue,  V = brown, M = magenta, S = green, C = orange, D = red, U = lgray, X = purple }
  if dialAddress == allGates[gateNumber].addr then
    term.setTextColor(black)
  end
  for v,w in pairs(colorBurst) do
    if allGates[gateNumber].rating == tostring(v) then
      return w
    end
  end
end

local function assignRating(gateNumber)
  local ratingBurst = { B = "Base", H = "Home",  V = "Village", M = "Misc.", S = "Safe", C = "Caution", D = "Danger", U = "Unknown", X = "Zog" }
  for i,j in pairs(ratingBurst) do
    if allGates[gateNumber].rating == i then
      return j
    end
  end
end

local function displayMarque()
  monB.setTextScale(2)
  monB.setBackgroundColor(black)
  monB.clear()
  monB.setTextColor(cyan)
  monB.setCursorPos(1,1)
  monB.write("Stargate")
  monB.setTextColor(yellow)
  monB.setCursorPos(2,2)
  monB.write(longName)
end

local function displayGateList()
  local mX,mY = monA.getSize()
  local firstGate = ((listPage - 1) * 8) + 1
  local tmY = 1
  monA.setTextScale(0.5)
  monA.setBackgroundColor(black)
  monA.clear()
  --for i = 1, #allGates, 1 do
  for i = firstGate, firstGate + 7, 1 do
    if tmY == 9 then break end
    if i > #allGates then break end
    monA.setCursorPos(5,tmY)
    monA.setTextColor(assignColor(i))
    monA.write(allGates[i].addr)
    tmY = tmY + 1
  end
  monA.setBackgroundColor(cyan)
  monA.setTextColor(white)
  monA.setCursorPos(1,10)
  monA.write("   /\\     \\/   ")
end

local function displayNotes(pY)
  --local numNotes
  local listEntry = (listPage-1) * 8 + pY
  if listEntry > #allGates then listEntry = #allGates end
  if listEntry < 1 then listEntry = 1 end
  monA.setBackgroundColor(black)
  monA.setTextScale(1)
  monA.setCursorPos(1,3)
  monA.clear()
  monB.setTextScale(1)
  monB.setTextColor(white)
  monB.setBackgroundColor(black)
  monB.clear()
  monB.setCursorPos(1,3)
  monB.write(allGates[listEntry].note)
  monA.setTextColor(assignColor(listEntry))
  monA.write(allGates[listEntry].addr)
end

local function drawHeader()
  local bgColor
  term.setBackgroundColor(black)
  term.setTextColor(white)
  zPos[1] = 1
  if secureStatus == "allclear" then
    if runState == "Dial" or runState == "rCmd" or runState == "viewing" then
      term.setBackgroundColor(blue)
    elseif runState == "Edit" or runState == "GateEdit" then
      term.setBackgroundColor(brown)
    elseif runState == "Trim" then
      term.setBackgroundColor(orange)
    elseif runState == "exit" then
      term.setBackgroundColor(purple)
    end
  elseif secureStatus == "lockdown" then
    term.setBackgroundColor(red)
  end
  for i = 1,termX,1 do
    term.setCursorPos(i,1)
    term.write(" ")
  end
  term.setCursorPos(((termX/2)-(#longName/2)),1)
  term.write(longName)
  term.setBackgroundColor(black)
  if runState ~= "viewing" and runState ~= "GateEdit" and secureStatus ~= "lockdown" then
    term.setCursorPos(2,1)
    term.write("-DHD-")
  end
  term.setBackgroundColor(gray)
  for i = 2,4,1 do
    for h = 1,termX,1 do
      term.setCursorPos(h,i)
      term.write(" ")
    end
  end
  term.setCursorPos(2,3)
  term.setTextColor(lgray)
  term.write("Shield is")
  term.setCursorPos(20,3)
  term.write("Gate is")
  local tColor
-- Shield & Gate Status
  if shieldStatus == "ON" then
    tColor = lime
  elseif shieldStatus == "OFF" then
    tColor = orange
  else
    tColor = red
  end
  term.setCursorPos(12,3)
  term.setTextColor(tColor)
  term.write(shieldStatus .. " ")
  if gateStatus == "Connected" then
    tColor = orange
  elseif gateStatus == "Disconnected" then
    tColor = lime
    dialAddress = ""
  elseif gateStatus == "Dialing" then
    tColor = cyan
  else
    tColor = red
  end
  term.setTextColor(tColor)
  term.setCursorPos(28,3)
  if gateStatus == "Connected" and dialAddress == "" then
    term.write("Incoming Connection")
  elseif gateStatus == "Dialing" and dialAddress == "" then
    term.write("Incoming Connection")
  else
    term.write(gateStatus .. "          ")
    term.setCursorPos(38,3)
    term.setTextColor(yellow)
    term.write(dialAddress)
  end
  if runState == "rCmd" then
    term.setCursorPos(((termX/2)-7),9) -- this repositions the rCmd cursor for the rCmd box after an update is received
    term.setTextColor(lime)            -- this returns the rCmd cursor to 'lime' after an update is received
  end
end

local function drawControlUI()
  term.setBackgroundColor(gray)
  for i = 6,16,1 do
    for h = 42,termX,1 do
      term.setCursorPos(h,i)
      term.write(" ")
    end
  end
  term.setTextColor(white)
  term.setCursorPos(43,7)
  if runState == "Dial" then
    if fuelGuage == true then
      term.setBackgroundColor(green)
    elseif fuelGuage == false then
      term.setBackgroundColor(red)
    end
    term.write(dhdCommandOptions[1] .. "     ")
  elseif runState == "Edit" then
    term.setBackgroundColor(brown)
    term.write(dhdCommandOptions[2] .. "     ")
  elseif runState == "Trim" then
    term.setBackgroundColor(orange)
    term.write(dhdCommandOptions[3] .. "     ")
  end
  if runState == "Dial" then
    term.setCursorPos(43,9)
    term.setBackgroundColor(lblue)
    term.write(dhdCommandOptions[4] .. "   ")
    if shieldStatus == "ON" then
      term.setBackgroundColor(green)
    elseif shieldStatus == "OFF" then
      term.setBackgroundColor(orange)
    else
      term.setBackgroundColor(red)
    end
    term.setCursorPos(termX,9)
    term.write(" ")
    term.setCursorPos(43,11)
    term.setTextColor(black)
    term.setBackgroundColor(orange)
    term.write(dhdCommandOptions[5] .. " ")
    term.setCursorPos(43,13)
    term.setTextColor(orange)
    term.setBackgroundColor(red)
    term.write(dhdCommandOptions[6] .. " ")
    term.setCursorPos(43,15)
    term.setTextColor(gray)
    term.setBackgroundColor(cyan)
    term.write(dhdCommandOptions[7] .. "     ")
  elseif runState == "Edit" then
    if numGates < 2377 then
      term.setCursorPos(43,11)
      term.setTextColor(white)
      term.setBackgroundColor(blue)
      term.write(dhdCommandOptions[8] .. "  ")
    end
    term.setCursorPos(43,13)
    term.setTextColor(white)
    term.setBackgroundColor(cyan)
    if gateChange == true then
      term.setTextColor(lime)
    end
    term.write(dhdCommandOptions[9] .. "     ")
  elseif runState == "Trim" then
    term.setCursorPos(43,11)
    term.setTextColor(gray)
    term.setBackgroundColor(lgray)
    term.write(dhdCommandOptions[10] .. " ")
    term.setCursorPos(43,13)
    term.setTextColor(black)
    term.setBackgroundColor(red)
    term.write(dhdCommandOptions[11] .. " ")
  end
  term.setBackgroundColor(black)
end

local function drawNaviUI()
  local pNum = tostring(pageNum)
  if pageNum < 10 then pNum = "0" .. pNum end -- Add a "0" before single digit page numbers
  local xNum = pNum:len()
  term.setCursorPos(((termX/2) - (math.floor(xNum/4))),termY)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write(pNum)
  if pageNum > 1 then                      -- Show "BACK" option if page number is > 1
    term.setCursorPos((termX/2) - 9,termY)
    term.write("<< BACK")
  elseif pageNum == 1 then
    term.setCursorPos((termX/2) - 9,termY) -- Overwrite "BACK" instead of clearing screen
    term.write("       ")
  end
  if pageNum < numPages then               -- Show "NEXT" option if page number is < numPages
    term.setCursorPos((termX/2) + 4,termY)
    term.write("NEXT >>")
  elseif pageNum == numPages then
    term.setCursorPos((termX/2) + 4,termY) -- Overwrite "NEXT" instead of clearing screen
    term.write("       ")
  end
end

local function drawDialUI()    -- Gate Address Book
  local bColor = black
  term.setBackgroundColor(bColor)
  local xPos = 2
  local yPos = 4
  local j = ((pageNum - 1) * 23) + pageNum
  for i = j,#allGates,1 do    -- for i = j,j+23,1 do (fixed to 24 gates per page, but avoids need for 'break')
    if (i > 0 and i < 7) or (i > 24 and i < 31) then
      xPos = 2
      yPos = 4
    elseif (i > 6 and i < 13) or (i > 30 and i < 37) then
      xPos = 12
      yPos = -8
    elseif (i > 12 and i < 19) or (i > 36 and i < 43) then
      xPos = 22
      yPos = -20
    elseif (i > 18 and i < 25) or (i > 42 and i < 49) then
      xPos = 32
      yPos = -32
    end
    term.setCursorPos(xPos,yPos + ((i - ((pageNum - 1) * 24)) * 2))
    term.setTextColor(white)
    bColor = assignColor(i)
    term.setBackgroundColor(bColor)
    if dialAddress == allGates[i].addr then
      term.setTextColor(black)
    end
    if i > (pageNum * 24) or i > numGates then
      break
    else
      if #allGates[i].addr == 7 then
        term.write(" " .. allGates[i].addr .. " ")
      elseif #allGates[i].addr == 8 then
        term.write(" " .. allGates[i].addr)
      elseif #allGates[i].addr == 9 then
        term.write(allGates[i].addr)
      elseif #allGates[i].addr < 7 then
        term.write("*" .. allGates[i].addr .. "*")  -- * = address is less than 7 characters
      else
        term.write("ERROR #10")  -- ERROR #10 = address is 10 or more characters
      end
    end
  end
  term.setBackgroundColor(black)
end

local function drawEditUI()
  local tColor = gray
  term.setTextColor(tColor)
  term.setBackgroundColor(black)
  local xPos = 2
  local yPos = 4
  local k = ((pageNum - 1) * 23) + pageNum
  for i = k,#allGates,1 do
    tColor = assignColor(i)
    if (i > 0 and i < 7) or (i > 24 and i < 31) then
      xPos = 2
      yPos = 4
    elseif (i > 6 and i < 13) or (i > 30 and i < 37) then
      xPos = 12
      yPos = -8
    elseif (i > 12 and i < 19) or (i > 36 and i < 43) then
      xPos = 22
      yPos = -20
    elseif (i > 18 and i < 25) or (i > 42 and i < 49) then
      xPos = 32
      yPos = -32
    end
    term.setCursorPos(xPos,yPos + ((i - ((pageNum - 1) * 24)) * 2))
    term.setTextColor(tColor)
    if i > (pageNum * 24) or i > numGates then
      break
    else
      if #allGates[i].addr == 7 then
        term.write("|" .. allGates[i].addr .. "|")
      elseif #allGates[i].addr == 8 then
        term.write("|" .. allGates[i].addr)
      elseif #allGates[i].addr == 9 then
        term.write(allGates[i].addr)
      elseif #allGates[i].addr < 7 then
        term.write("-" .. allGates[i].addr .. "-")  -- * = address is less than 7 characters
      else
        term.write("ERROR #10")  -- ERROR #10 = address is 10 or more characters
      end
    end
  end
end

local function drawTrimUI()
  local tColor = gray
  term.setTextColor(tColor)
  term.setBackgroundColor(black)
  local xPos = 2
  local yPos = 4
  local k = ((pageNum - 1) * 23) + pageNum
  for i = k,#allGates,1 do   -- k+24 instead of allGates?
    tColor = assignColor(i)
    if (i > 0 and i < 7) or (i > 24 and i < 31) then
      xPos = 2
      yPos = 4
    elseif (i > 6 and i < 13) or (i > 30 and i < 37) then
      xPos = 12
      yPos = -8
    elseif (i > 12 and i < 19) or (i > 36 and i < 43) then
      xPos = 22
      yPos = -20
    elseif (i > 18 and i < 25) or (i > 42 and i < 49) then
      xPos = 32
      yPos = -32
    end
    term.setCursorPos(xPos,yPos + ((i - ((pageNum - 1) * 24)) * 2))
    term.setTextColor(tColor)
    if i > (pageNum * 24) or i > numGates then
      break
    else
      if #allGates[i].addr == 7 then
        term.write("/" .. allGates[i].addr .. "/")
      elseif #allGates[i].addr == 8 then
        term.write("/" .. allGates[i].addr)
      elseif #allGates[i].addr == 9 then
        term.write(allGates[i].addr)
      elseif #allGates[i].addr < 7 then
        term.write("\\" .. allGates[i].addr .. "\\")  -- * = address is less than 7 characters
      else
        term.write("ERROR #10")  -- ERROR #10 = address is 10 or more characters
      end
    end
  end
end

local function viewDialHelp(pY)
  term.setCursorPos(1, pY)
  term.setBackgroundColor(gray)
  term.setTextColor(lgray)
  for i = 1,termX,1 do
    term.setCursorPos(i,pY)
    term.write(" ")
  end
  term.setCursorPos(2,pY)
  term.write("-- Notes --")
  term.setBackgroundColor(black)
  term.setTextColor(white)
  term.setCursorPos(2, pY + 2)
  term.write("- Left click an address to dial")
  term.setCursorPos(2, pY + 3)
  term.write("- Right click an address to view notes")
  term.setCursorPos(2, pY + 4)
  term.write("- rCmd: manually send commands to the gate")
  term.setCursorPos(2, pY + 5)
  term.write("  - ADDRESS / sON / sOFF / endCall")
  term.setCursorPos(2, pY + 6)
  term.write("  - lockdown / allclear / restart")
  term.setCursorPos(2, pY + 7)
  term.write("  - reboot & quit are local")
  term.setCursorPos(2, pY + 8)
  term.write("  - reset = reboots DHD & gateLiaison")
end

local function viewEditHelp(pY)
  term.setCursorPos(1, pY)
  term.setBackgroundColor(gray)
  term.setTextColor(lgray)
  for i = 1,termX,1 do
    term.setCursorPos(i,pY)
    term.write(" ")
  end
  term.setCursorPos(2,pY)
  term.write("-- Notes --")
  term.setBackgroundColor(black)
  term.setTextColor(white)
  term.setCursorPos(2, pY + 2)
  term.write("- Edit Mode: Left click an address to edit")
  term.setCursorPos(2, pY + 3)
  term.write("             Right click an address for Trim Mode")
  term.setCursorPos(2, pY + 5)
  term.write("- Trim Mode: Left click an address to delete")
  term.setCursorPos(2, pY + 6)
  term.write("  '-COMMIT-' saves new gate data")
  term.setCursorPos(2, pY + 7)
  term.write("  '- Undo -' cancels all deletions and")
  term.setCursorPos(2, pY + 8)
  term.write("             exits Trim mode")
end

local function drawHelpUI()
  local colorDefs = { blue, green, magenta, lblue, orange, lgray, brown, red }
  local colorDesc = { "Base/Outpost/Hub", "Secured/Safe", "Misc./Special", "Home/Camp", "Caution", "Unknown", "Village", "Danger" }
  local colorCount = #colorDesc
  local xMod = 2
  local yMod = 4
  term.setTextColor(white)
  term.setBackgroundColor(black)
  term.clear()
  term.setCursorPos(1,1)
  if runState == "DialHelp" then    -- Header
    term.setBackgroundColor(cyan)
  elseif runState == "EditHelp" then
    term.setBackgroundColor(brown)
  end
  for i = 1,termX,1 do
    term.setCursorPos(i,1)
    term.write(" ")
  end
  term.setBackgroundColor(gray)
  for i = 1,termX,1 do
    term.setCursorPos(i,termY)
    term.write(" ")
  end
  term.setCursorPos((termX/2)-(((#runState-4)/2)+3),1)
  term.write(" " .. runState:sub(1,#runState-4) .. " Help ")
  term.setCursorPos(1,2)
  term.setBackgroundColor(gray)
  term.setTextColor(lgray)
  for i = 1,termX,1 do
    term.setCursorPos(i,2)
    term.write(" ")
  end
  term.setCursorPos(2,2)
  term.write("-- Key --")          -- Color key for gate classifications
  term.setBackgroundColor(black)
  for q,r in pairs(colorDefs) do
    term.setCursorPos(xMod,yMod)
    term.setTextColor(r)
    term.write(tostring(colorDesc[q]))
    if xMod == 2 then
      xMod = 20
    elseif xMod == 20 then
      xMod = 38
    elseif xMod == 38 then
      xMod = 2
      yMod = yMod + 1
    end
  end
  term.setBackgroundColor(gray)
  term.setTextColor(lgray)
  term.setCursorPos(2,termY)
  term.write("ccDHD ver. " .. ccDHDVer)  -- Show ccDHD version in bottom pane
  if runState == "DialHelp" then          -- Show either DHD or Edit help, depending on runState
    viewDialHelp(colorCount)
  elseif runState == "EditHelp" then
    viewEditHelp(colorCount)
  end
end

local function drawSettingsUI()
  term.setBackgroundColor(black)
  term.clear()
  term.setCursorPos(1,1)
  term.setBackgroundColor(cyan)    -- Header
  for i = 1,termX,1 do
    term.setCursorPos(i,1)
    term.write(" ")
  end
  term.setBackgroundColor(gray)
  for i = 1,termX,1 do
    term.setCursorPos(i,2)
    term.write(" ")
  end
  term.setTextColor(white)
  term.setCursorPos((termX/2)-((#dhdSettings.thisGate/2))-4,1)
  term.write(" " .. dhdSettings.thisGate .. " Settings ")
  for i = 1,termX,1 do
    term.setCursorPos(i,termY)
    term.write(" ")
  end
  term.setBackgroundColor(lgray)
  term.setCursorPos(39,2)
  if configChange == true then
    term.setTextColor(lime)
  elseif configChange == false then
    term.setTextColor(gray)
  end
  term.write(" Save ")             -- Save / Close buttons
  term.setCursorPos(45,2)
  term.setTextColor(red)
  term.write(" Close ")
   -- Settings 1st Column
  term.setCursorPos(2,4)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("This gate")
  term.setCursorPos(17,4)
  term.setTextColor(cyan)
  term.write(dhdSettings.thisGate) -- thisGate
  term.setCursorPos(2,6)
  term.setTextColor(gray)
  term.write("Lockdown pass")
  term.setCursorPos(17,6)
  term.setTextColor(orange)
  term.write(dhdSettings.password) -- superSecretPassword
  term.setCursorPos(2,8)
  term.setTextColor(gray)
  term.write("BioLock")
  term.setCursorPos(17,8)
  if dhdSettings.bio.lock == "OFF" then  -- Fistprint Authentication (Biolock mod)
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.bio.lock == "ON" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(23,8)
  term.setBackgroundColor(gray)
  term.setTextColor(black)
  term.write("#")
  term.setBackgroundColor(black)
  term.setCursorPos(2,10)
  if dhdSettings.net == "R" then   -- redNet (specify server #)
    term.setTextColor(red)
    term.write("RedNet")
  elseif dhdSettings.net == "C" then -- ccNet (specify send/receive channels)
    term.setTextColor(green)
    term.write("ccNet")
  end
  term.setCursorPos(17,10)
  if dhdSettings.net == "R" then   -- Red for RedNet, Green for ccNet
    term.setBackgroundColor(gray)
    term.write("  ")
   term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.net == "C" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setBackgroundColor(gray)
  term.setTextColor(black)
  term.setCursorPos(23,10)
  term.write("#")
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.setCursorPos(2,12)
  if dhdSettings.net == "R" then
    term.write("Gate Liaison")
  elseif dhdSettings.net == "C" then
    term.write("Channels")
  end
  term.setCursorPos(17,12)
  if dhdSettings.net == "R" then   -- Gate Liaison (rNet) , Send Channel (ccNet)
    term.setTextColor(red)
    term.write(dhdSettings.server)
  elseif dhdSettings.net == "C" then
    term.setTextColor(green)
    term.write(dhdSettings.channels.send)
    term.setCursorPos(22,12)
    term.setTextColor(lgray)
    term.write("/")
    term.setCursorPos(23,12)
    term.setTextColor(green)
    term.write(dhdSettings.channels.recv) -- Receive Channel (ccNet)
  end
  term.setCursorPos(2,14)
  term.setTextColor(gray)
  term.write("Marque")             -- Marque (monB)
  term.setCursorPos(17,14)
  if dhdSettings.monB == "none" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  else
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(23,14)
  term.setBackgroundColor(gray)
  term.setTextColor(black)
  term.write("#")
  term.setCursorPos(2,16)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("List Monitor")       -- List Monitor (monA)
  term.setCursorPos(17,16)
  if dhdSettings.monA == "none" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  else
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(23,16)
  term.setBackgroundColor(gray)
  term.setTextColor(black)
  term.write("#")
  -- Settings 2nd column
  term.setCursorPos(28,4)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("END Call Shield")    -- END Call Shield (ON/OFF)
  term.setCursorPos(45,4)
  if dhdSettings.ecShield == "OFF" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.ecShield == "ON" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(28,6)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("STARTUP Shield")     -- Shield ON/OFF @ startup
  term.setCursorPos(45,6)
  --term.setTextColor(lblue)
  if dhdSettings.startShield == "OFF" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.startShield == "ON" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(28,8)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("Call Logging")       -- Gate Liaison should/not log outbound calls
  term.setCursorPos(45,8)
  --term.setTextColor(lblue)
  if dhdSettings.logs == "OFF" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.logs == "ON" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(28,10)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("Last")               -- Last Gate Dialed (log)
  term.setCursorPos(33,10)
  term.setBackgroundColor(black)
  term.setTextColor(lgray)
  term.write(dhdSettings.lastGate)
  term.setCursorPos(28,12)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("Hist")               -- Dialing History (log)
  term.setCursorPos(33,12)
  term.setBackgroundColor(black)
  term.setTextColor(lgray)
  term.write(dhdSettings.gateHistory)
  term.setCursorPos(28,14)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("Initiator Only")     -- Only call initiator can end call (ON/OFF)
  term.setCursorPos(45,14)
  if dhdSettings.callEnd == "OFF" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  elseif dhdSettings.callEnd == "ON" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  end
  term.setCursorPos(28,16)
  term.setBackgroundColor(black)
  term.setTextColor(gray)
  term.write("Bio: ")
  if dhdSettings.bio.func == "none" then
    term.setTextColor(lgray)
    term.write("No Function")
  elseif dhdSettings.bio.func == "shield" then
    term.setTextColor(green)
    term.write("Shield")
  elseif dhdSettings.bio.func == "lock" then
    term.setTextColor(red)
    term.write("Lockdown")
  end
  term.setCursorPos(45,16)
  if dhdSettings.bio.func == "none" then
    term.setBackgroundColor(green)
    term.write(" ")
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write(" ")
  elseif dhdSettings.bio.func == "shield" then
    term.setBackgroundColor(green)
    term.write("  ")
    term.setBackgroundColor(gray)
    term.write("  ")
  elseif dhdSettings.bio.func == "lock" then
    term.setBackgroundColor(gray)
    term.write("  ")
    term.setBackgroundColor(red)
    term.write("  ")
  end
end

local function drawSecureUI()
  -- Uh, oh...doubleSecretProbation()
  if monA ~= "none" then
    monA.setBackgroundColor(black)
    monA.clear()
  end
  if monB ~= "none" then
    monB.setBackgroundColor(black)
    monB.clear()
    monB.setTextColor(red)
    monB.setCursorPos(1,1)
    monB.write("!! LOCKDOWN !!")
  end
  term.setBackgroundColor(black)
  term.clear()
  drawHeader()
  term.setBackgroundColor(black)
  term.setTextColor(red)
  term.setCursorPos((termX/2)-7,9)
  term.write("!! LOCKDOWN !!")
  term.setTextColor(gray)
  term.setCursorPos((termX/2)-10,15)
  term.write("password: ")
end

local function drawSideList(pSide)
  term.setBackgroundColor(gray)
  for i = 4,16,1 do
    term.setCursorPos(26,i)
    term.write("        ")
  end
  term.setCursorPos(27,5)
  if pSide == "top" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Top")
  term.setCursorPos(27,7)
  if pSide == "bottom" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Bottom")
  term.setCursorPos(27,9)
  if pSide == "front" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Front")
  term.setCursorPos(27,11)
  if pSide == "back" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Back")
  term.setCursorPos(27,13)
  if pSide == "left" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Left")
  term.setCursorPos(27,15)
  if pSide == "right" then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("Right")
end

local function drawRatingList(gRating,currentGate)
  term.setBackgroundColor(lgray)
  term.setCursorPos(14,5)
  term.write("                  ")
  term.setCursorPos(14,14)
  term.write("                  ")
  for i = 6,13,1 do
    term.setCursorPos(31,i)
    term.write(" ")
  end
  term.setBackgroundColor(black)
  for i = 6,13,1 do
    term.setCursorPos(14,i)
    term.write("                 ")
  end
  term.setTextColor(white)
  term.setCursorPos(14,6)
  term.setBackgroundColor(blue)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "B" then
    term.setTextColor(blue)
  else
    term.setTextColor(gray)
  end
  term.write("Base/Outpost/Hub")
  term.setCursorPos(14,7)
  term.setBackgroundColor(lblue)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "H" then
    term.setTextColor(lblue)
  else
    term.setTextColor(gray)
  end
  term.write("Home/Camp")
  term.setCursorPos(14,8)
  term.setBackgroundColor(brown)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "V" then
    term.setTextColor(brown)
  else
    term.setTextColor(gray)
  end
  term.write("Village")
  term.setCursorPos(14,9)
  term.setBackgroundColor(magenta)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "M" then
    term.setTextColor(magenta)
  else
    term.setTextColor(gray)
  end
  term.write("Misc/Special")
  term.setCursorPos(14,10)
  term.setBackgroundColor(green)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "S" then
    term.setTextColor(green)
  else
    term.setTextColor(gray)
  end
  term.write("Safe/Secured")
  term.setCursorPos(14,11)
  term.setBackgroundColor(orange)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "C" then
    term.setTextColor(orange)
  else
    term.setTextColor(gray)
  end
  term.write("Caution")
  term.setCursorPos(14,12)
  term.setBackgroundColor(red)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "D" then
    term.setTextColor(red)
  else
    term.setTextColor(gray)
  end
  term.write("Danger")
  term.setCursorPos(14,13)
  term.setBackgroundColor(gray)
  term.write(" ")
  term.setBackgroundColor(black)
  if gRating == "U" then
    term.setTextColor(white)
  else
    term.setTextColor(gray)
  end
  term.write("Unknown")
end

local function drawAuthList(cAuth)
  term.setBackgroundColor(gray)
  for i = 4,14,1 do
    term.setCursorPos(26,i)
    term.write("   ")
  end
  term.setCursorPos(27,5)
  if cAuth == 1 then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("1")
  term.setCursorPos(27,7)
  if cAuth == 2 then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("2")
  term.setCursorPos(27,9)
  if cAuth == 3 then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("3")
  term.setCursorPos(27,11)
  if cAuth == 4 then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("4")
  term.setCursorPos(27,13)
  if pSide == 5 then
    term.setTextColor(lime)
  else
    term.setTextColor(white)
  end
  term.write("5")
end


local function drawMenu()
  menuState = true
  term.setBackgroundColor(black)
  term.setTextColor(white)
  term.setCursorPos(2,1)
  term.write("_DHD_")
  term.setBackgroundColor(gray)
  for i = 2,8,1 do
    term.setCursorPos(2,i)
    term.write(" ")
  end
  term.setBackgroundColor(lgray)
  for i = 2,8,1 do
    term.setCursorPos(3,i)
    term.write("         ")
  end
  term.setBackgroundColor(lblue)
  term.setCursorPos(2,3)
  term.write(" ")
  term.setCursorPos(3,3)
  term.setBackgroundColor(lgray)
  term.setTextColor(gray)
  term.write("Settings")
  if runState == "Dial" then
    term.setBackgroundColor(cyan)
  elseif runState == "Edit" or runState == "Trim" then
    term.setBackgroundColor(brown)
  end
  term.setCursorPos(2,5)
  term.write(" ")
  term.setCursorPos(3,5)
  term.setBackgroundColor(lgray)
  term.write(runState .. " Help")
  term.setCursorPos(2,7)
  term.setBackgroundColor(red)
  term.write(" ")
  term.setCursorPos(3,7)
  term.setBackgroundColor(lgray)
  term.write("  EXIT  ")
end

local function viewGateEntry(dataEntry)
  tempState = runState
  if tempState ~= "GateEdit" then runState = "viewing" end
  term.setBackgroundColor(black)
  term.clear()
  drawCLI()
  term.setBackgroundColor(black)
  local txtColor = assignColor(dataEntry)
  term.setCursorPos(2,7)
  term.setTextColor(txtColor)
  term.write(allGates[dataEntry].addr)
  term.setCursorPos(12,7)
  term.setTextColor(gray)
  local ratingWord = assignRating(dataEntry)
  term.write(ratingWord)
  term.setCursorPos(2,9)
  term.setTextColor(white)
  term.write(allGates[dataEntry].note)
  term.setCursorPos(2,12)
  term.setTextColor(lgray)
  term.write("Dimension: ")
  term.setTextColor(lblue)
  term.write(allGates[dataEntry].loc.dim)
  term.setCursorPos(2,13)
  term.setTextColor(lgray)
  term.write("x: ")
  term.setTextColor(brown)
  term.write(allGates[dataEntry].loc.x)
  term.setCursorPos(2,14)
  term.setTextColor(lgray)
  term.write("y: ")
  term.setTextColor(brown)
  term.write(allGates[dataEntry].loc.y)
  term.setCursorPos(2,15)
  term.setTextColor(lgray)
  term.write("z: ")
  term.setTextColor(brown)
  term.write(allGates[dataEntry].loc.z)
  term.setCursorPos((termX/2)-8,termY-1)
  term.setTextColor(black)
  term.setBackgroundColor(gray)
  term.write(" < < < BACK > > > ")
end

local function editGateEntry(dataBlock)
  runState = "GateEdit"
  currentEdit = dataBlock
  local colorBurst = { B = blue, H = lblue,  V = brown, M = magenta, S = green, C = orange, D = red, U = lgray, X = lgray }
  local ratingBurst = { B = "Base", H = "Home",  V = "Village", M = "Misc.", S = "Safe", C = "Caution", D = "Danger", U = "Unknown", X = "obo" }
  if currentEdit == "new" then    -- If we're adding a new gate, create a 'default' to edit
    local newGate = { addr = "NEWGATE", rating = "U", note = "short note", loc = {x=99999,y=99999,z=99999,dim=1,}, }
    table.insert(allGates,newGate)
    dataBlock = #allGates
    currentEdit = #allGates
    numGates = #allGates
    numPages = math.ceil(numGates / 24)   -- Re-paginate gates
    listPages = math.ceil(numGates / 8)
  end
  term.setBackgroundColor(black)
  term.clear()
  drawHeader()
  -- Display data for editing
  term.setBackgroundColor(black)
  if currentEdit <= numGates then
    local tColor = assignColor(currentEdit)
    if tColor ~= nil then
      term.setTextColor(tColor)
      term.setCursorPos(2,7)
      term.write(allGates[currentEdit].addr)
      term.setCursorPos(12,7)
      term.setTextColor(gray)
      local ratingWord = assignRating(currentEdit)
      term.write(ratingWord)
      term.setTextColor(white)
      term.setCursorPos(2,9)
      term.setTextColor(white)
      term.write(allGates[currentEdit].note)
      term.setCursorPos(2,12)
      term.setTextColor(lgray)
      term.write("Dimension: ")
      term.setTextColor(lblue)
      term.write(allGates[currentEdit].loc.dim)
      term.setCursorPos(2,13)
      term.setTextColor(lgray)
      term.write("x: ")
      term.setTextColor(brown)
      term.write(allGates[currentEdit].loc.x)
      term.setCursorPos(2,14)
      term.setTextColor(lgray)
      term.write("y: ")
      term.setTextColor(brown)
      term.write(allGates[currentEdit].loc.y)
      term.setCursorPos(2,15)
      term.setTextColor(lgray)
      term.write("z: ")
      term.setTextColor(brown)
      term.write(allGates[currentEdit].loc.z)
    end
  end
  term.setCursorPos((termX/2)-8,termY-1)
  term.setTextColor(black)
  term.setBackgroundColor(gray)
  term.write(" < < < BACK > > > ")
end

local function clearGateEntryScreen()
  runState=tempState
  term.setBackgroundColor(black)
  term.setCursorPos(2,7)
  term.write("                                        ")
  term.setCursorPos(2,9)
  for i = 1,termX,1 do
    term.write(" ")
  end
  for i = 12,15,1 do
    term.setCursorPos(2,i)
    term.write("                ")
  end
  term.setCursorPos(13,12)
  term.write("                                      ")
  term.setCursorPos(1,termY-1)
  for i = 1,termX,1 do
    term.write(" ")
  end
  drawCLI()
end

local function deleteGate(tGate) -- TRIM mode: delete gate
  table.remove(allGates,tGate)
end

local function secKernel()       -- LOCKDOWN handler
  drawSecureUI()
  term.setTextColor(yellow)
  while secureStatus == "lockdown" do
    term.setCursorPos(termX/2,15)
    local securePass = tostring(read(passSymbols[math.random(1,#passSymbols)]))
    if securePass == dhdSettings.password then
      netSend("allclear")
      if dhdSettings.net == "R" then
        local senderID, message = rednet.receive(1)
        if senderID == gateLiaison and (message == "YY0" or message == "YY1") then
          secureStatus = "allclear"
          term.setBackgroundColor(black)
          term.setCursorPos(15,9)
          term.write("                      ")
          term.setCursorPos(15,15)
          term.write("                      ")
        end
      elseif dhdSettings.net == "C" then
        local ccNetEvent = { os.pullEvent("modem_message") }
        if ccNetEvent[3] == dhdSettings.channels.recv and ccNetEvent[4] == dhdSettings.channels.send and (ccNetEvent[5] == "YY0" or ccNetEvent[5] == "YY1") then
          secureStatus = "allclear"
          term.setBackgroundColor(black)
          term.setCursorPos(15,9)
          term.write("                      ")
          term.setCursorPos(15,15)
          term.write("                      ")
        end
      end
      drawCLI()
      break
    end
  end
end

function drawCLI()   -- Client Interface 'decider'
  if menuState == false then
    drawHeader()
  end
  if runState == "viewing" then return end
  if secureStatus == "lockdown" then
    netSend(secureStatus)
    return
  else
    if menuState == false then
      if screenState == "list" then
        if monB ~= "none" then
          displayMarque()
        end
        if monA ~= "none" then
          displayGateList()
        end
      end
      if runState == "Dial" or gateStatus == "Dialing" then
        drawDialUI()
        drawControlUI()
        drawNaviUI()
      elseif runState == "Cfg" then
        drawSettingsUI()
      elseif runState == "Edit" then
        drawEditUI()
        drawControlUI()
        drawNaviUI()
      elseif runState == "Trim" then
        drawTrimUI()
        drawControlUI()
        drawNaviUI()
      elseif runState == "DialHelp" or runState == "EditHelp" then
        drawHelpUI()
      end
    end
  end
end

local function remoteCommand()
  local tempState = runState
  runState = "rCmd"
  term.setTextColor(lime)
  term.setCursorPos(((termX/2)-8),8)
  term.setBackgroundColor(lgray)
  term.write("               ")
  term.setCursorPos(((termX/2)-8),9)
  term.setBackgroundColor(lgray)
  term.write(" ")
  term.setBackgroundColor(gray)
  term.setCursorPos(((termX/2)-7),9)
  term.write("             ")
  term.setCursorPos(((termX/2)+6),9)
  term.setBackgroundColor(lgray)
  term.write(" ")
  term.setCursorPos(((termX/2)-8),10)
  term.setBackgroundColor(lgray)
  term.write("               ")
  term.setCursorPos(((termX/2)-7),9)
  term.setBackgroundColor(gray)
    local commandLine = read()
  term.setBackgroundColor(black)
  for i = 8,10,1 do
    term.setCursorPos(((termX/2)-8),i)
    term.write("               ")
  end
  if commandLine == "quit" or commandLine == "exit" then
    runState = "exit"
    kernelState = false
    return
  elseif commandLine == "reboot" then
    runState = "reboot"
    kernelState = false
    return
  elseif commandLine == "reset" then
    runState = "reset"
    kernelState = false
    netSend(commandLine)
    return
  elseif commandLine == "sON" then
    netSend(commandLine)
    --return
  elseif commandLine == "sOFF" then
    netSend(commandLine)
    --return
  else
    if commandLine ~= "" and commandLine:len() > 6 and commandLine:len() < 10 then
      netSend(commandLine)
    end
  end
  runState = tempState
  drawCLI()
end

local function mClick()
  while true do
    local clickEvent = {os.pullEvent("mouse_click")}
    local mButton = clickEvent[2]
    local mcX = clickEvent[3]
    local mcY = clickEvent[4]
    -- Menu & Menu Selections
    if menuState == true then
      if mcX > 1 and mcX < 11 then
        if mcY == 3 then
          runState = "Cfg"
          menuState = false
          drawSettingsUI()
        elseif mcY == 5 and runState == "Dial" then
          runState = "DialHelp"
          menuState = false
          drawHelpUI()
        elseif mcY == 5 and runState == "Edit" then
          runState = "EditHelp"
          menuState = false
          drawHelpUI()
        elseif mcY == 7 then
          runState = "exit"
          kernelState = false
          menuState = false
          break  -- required to exit properly
        else
          menuState = false
          term.setBackgroundColor(black)
          for i = 5,8,1 do
            term.setCursorPos(2,i)
            term.write("           ")
          end
          drawCLI()
        end
      else
        menuState = false
        term.setBackgroundColor(black)
        for i = 5,8,1 do
          term.setCursorPos(2,i)
          term.write("           ")
        end
        drawCLI()
      end
    elseif menuState == false and runState == "DialHelp" then
      term.setBackgroundColor(black)
      term.clear()
      runState = "Dial"
      drawCLI()
      return
    elseif menuState == false and runState == "EditHelp" then
      term.setBackgroundColor(black)
      term.clear()
      runState = "Edit"
      drawCLI()
      return
    elseif menuState == false and runState == "viewing" then
      clearGateEntryScreen()
      return
    elseif menuState == false and runState ~= "Cfg" and runState ~= "GateEdit" then
      if mcY == 1 then
        if mcX > 1 and mcX < 9 then
          menuState = true
          drawMenu()
        end
      end
      -- Command Buttons (change modes, mode operation)
      if mcX > 41 and mcX <= termX and (runState == "Dial" or runState == "Edit" or runState == "Trim") then
        if mcY == 7 then
          if runState == "Dial" then
            runState = "Edit"
            drawCLI()
          elseif runState == "Edit" then
            runState = "Dial"
            drawCLI()
          end
          return
        elseif mcY == 9 then
          if runState == "Dial" and shieldStatus == "OFF" then
            netSend("sON")
          elseif runState == "Dial" and shieldStatus == "ON" and secureStatus == "allclear" then
            netSend("sOFF")
          end
          return
        elseif mcY == 11 then
          if runState == "Dial" then
            if dhdSettings.ecShield == "ON" then
              netSend("sON")
            end
            if dhdSettings.callEnd == "OFF" or (dhdSettings.callEnd == "ON" and dialAddress ~= "") then
              netSend("endCall")
              dialAddress = ""
            end
          elseif runState == "Edit" then
            if numGates < 2377 then
              gateChange = true
              editGateEntry("new")
            end
          elseif runState == "Trim" then
            runState = "Edit"
            ingestData(dhdSettings.gateData,"gate")
            if gateChange == true then
              term.setBackgroundColor(black)
              term.clear()
            end
            gateChange = false
            drawCLI()
          end
          return
        elseif mcY == 13 then
          if runState == "Dial" then
            secureStatus = "lockdown"
            netSend(secureStatus)
            --secKernel()
          elseif runState == "Edit" then
            gateChange = false
            saveData(dhdSettings.gateData,"gate")
            drawControlUI()
          elseif runState == "Trim" then
            runState = "Edit"
            saveData(dhdSettings.gateData,"gate")
            gateChange = false
            drawCLI()
          end
          return
        elseif mcY == 15 then
          if runState == "Dial" then
            remoteCommand()
          end
          if runState == "reboot" or runState == "reset" or runState == "exit" then break end
        end
      end
    end
    -- Page Navigation via click
    if mcY == termY then
      if mcX > 0 and mcX < termX/2 then  -- Bottom row of screen, left half / Back
        if pageNum > 1 then
          pageNum = pageNum - 1
          term.clear()
          drawCLI()
        end
      elseif mcX > termX/2 and mcX <= termX then  -- Bottom row of screen, right half / Forward
        if pageNum < numPages then
          pageNum = pageNum + 1
          term.clear()
          drawCLI()
        end
      end
    end
    -- Dial a listed address, view it's info, edit entry, or enter trim mode
    local j = ((pageNum - 1) * 23) + pageNum
    local k = ((pageNum - 1) * 23)
    local l = ((pageNum - 1) * 24)
    if mcY > 5 and mcY < 17 then
      for i = j,#allGates,1 do
          -- Addresses Column 1
        if mcX > 1 and mcX < 11 and mcY == 4 + ((i - l) * 2) and i <= numGates then
          if runState == "Dial" then
            if mButton == 1 and gateStatus ~= "Dialing" and gateStatus ~= "Connected" then
              dialAddress = allGates[i].addr
              netSend(dialAddress)
              if dhdSettings.logs == "ON" then recordSessionData() end   -- add dial & gate cmds received? (e.g. recordSessionData("dial"))
            elseif mButton == 2 then
              viewGateEntry(i)
              --return
            end
          elseif runState == "Edit" then
            if mButton == 1 then
              editGateEntry(i)
              return
            elseif mButton == 2 then
              runState = "Trim"
              drawCLI()
              return
            end
          elseif runState == "Trim" then
            if mButton == 1 then
              table.remove(allGates,i)
              numGates = numGates - 1
              numPages = math.ceil(numGates/24)
              listPages = math.ceil(numGates/8)
              term.clear()
              drawCLI()
            end
          end
          -- Addresses Column 2
        elseif mcX > 11 and mcX < 21 and mcY == 4 + ((i - l) * 2) and (i + 6) <= numGates then
          if runState == "Dial" then
            if mButton == 1 and gateStatus ~= "Dialing" and gateStatus ~= "Connected" then
              dialAddress = allGates[i + 6].addr
              netSend(dialAddress)
              if dhdSettings.logs == "ON" then recordSessionData() end
            elseif mButton == 2 then
              viewGateEntry(i + 6)
            end
          elseif runState == "Edit" then
            if mButton == 1 then
              editGateEntry(i + 6)
              return
            elseif mButton == 2 then
              runState = "Trim"
              drawCLI()
              return
            end
          elseif runState == "Trim" then
            if mButton == 1 then
              table.remove(allGates,i + 6)
              numGates = numGates - 1
              numPages = math.ceil(numGates/24)
              listPages = math.ceil(numGates/8)
              term.clear()
              drawCLI()
            end
          end
          -- Addresses Column 3
        elseif mcX > 21 and mcX < 31 and mcY == 4 + ((i - l) * 2) and (i + 12) <= numGates then
          if runState == "Dial" then
            if mButton == 1 and gateStatus ~= "Dialing" and gateStatus ~= "Connected" then
              dialAddress = allGates[i + 12].addr
              netSend(dialAddress)
              if dhdSettings.logs == "ON" then recordSessionData() end
            elseif mButton == 2 then
              viewGateEntry(i + 12)
            end
          elseif runState == "Edit" then
            if mButton == 1 then
              editGateEntry(i + 12)
              return
            elseif mButton == 2 then
              runState = "Trim"
              drawCLI()
              return
            end
          elseif runState == "Trim" then
            if mButton == 1 then
              table.remove(allGates,i + 12)
              numGates = numGates - 1
              numPages = math.ceil(numGates/24)
              listPages = math.ceil(numGates/8)
              term.clear()
              drawCLI()
            end
          end
          -- Addresses Column 4
        elseif mcX > 31 and mcX < 41 and mcY == 4 + ((i - l) * 2) and (i + 18) <= numGates then
          if runState == "Dial" then
            if mButton == 1 and gateStatus ~= "Dialing" and gateStatus ~= "Connected" then
              dialAddress = allGates[i + 18].addr
              netSend(dialAddress)
              if dhdSettings.logs == "ON" then recordSessionData() end
            elseif mButton == 2 then
              viewGateEntry(i + 18)
            end
          elseif runState == "Edit" then
            if mButton == 1 then
              editGateEntry(i + 18)
              return
            elseif mButton == 2 then
              runState = "Trim"
              drawCLI()
              return
            end
          elseif runState == "Trim" then
            if mButton == 1 then
              table.remove(allGates,i + 18)
              numGates = numGates - 1
              numPages = math.ceil(numGates/24)
              listPages = math.ceil(numGates/8)
              term.clear()
              drawCLI()
            end
          end
        end
      end
    end
    -- Gate Editing
    if runState == "GateEdit" then
      if mcY == 7 then
         -- Edit Gate Address
        if mcX > 1 and mcX < 10 then
          term.setBackgroundColor(black)
          term.setTextColor(gray)
          term.setCursorPos(2,7)
          term.write(allGates[currentEdit].addr)
          term.setTextColor(yellow)
          term.setCursorPos(2,7)
          local newGate = string.upper(tostring(read()))
          if newGate ~= "" and newGate ~= "nil" and newGate:len() > 6 and newGate:len() < 10 then
            allGates[currentEdit].addr = newGate
            gateChange = true
          end
          term.setCursorPos(2,7)
          local gColor = assignColor(currentEdit)
          term.setTextColor(gColor)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].addr)
         -- Edit Gate Rating/Classification
        elseif mcX > 11 and mcX < 19 then
          term.setBackgroundColor(black)
          term.setTextColor(gray)
          term.setCursorPos(12,7)
          term.write(allGates[currentEdit].rating)
          term.setTextColor(yellow)
          drawRatingList(allGates[currentEdit].rating,currentEdit)
          local newRating = { os.pullEvent("mouse_click") }
          if newRating[3] > 14 and newRating[2] < 20 then
            if newRating[4] == 6 then
              allGates[currentEdit].rating = "B"
              gateChange = true
            elseif newRating[4] == 7 then
              allGates[currentEdit].rating = "H"
              gateChange = true
            elseif newRating[4] == 8 then
              allGates[currentEdit].rating = "V"
              gateChange = true
            elseif newRating[4] == 9 then
              allGates[currentEdit].rating = "M"
              gateChange = true
            elseif newRating[4] == 10 then
              allGates[currentEdit].rating = "S"
              gateChange = true
            elseif newRating[4] == 11 then
              allGates[currentEdit].rating = "C"
              gateChange = true
            elseif newRating[4] == 12 then
              allGates[currentEdit].rating = "D"
              gateChange = true
            elseif newRating[4] == 13 then
              allGates[currentEdit].rating = "U"
              gateChange = true
            end
          end
          term.setBackgroundColor(black)
          for i = 2,termX,1 do
            term.setCursorPos(i,9)
            term.write(" ")
          end
          term.setCursorPos(2,10)
          for i = 2,termX,1 do
            term.write(" ")
          end
          for i = 5,14,1 do
            term.setCursorPos(14,i)
            term.write("                  ")
          end
          term.setCursorPos(2,7)
          local gtColor = assignColor(currentEdit)
          term.setTextColor(gtColor)
          term.write(allGates[currentEdit].addr)
          term.setCursorPos(12,7)
          term.setTextColor(gray)
          local gtRating = assignRating(currentEdit)
          term.write(gtRating)
          term.setCursorPos(13,12)
          term.setTextColor(lgray)
          term.write(allGates[currentEdit].loc.dim)
          term.setCursorPos(2,9)
          term.setTextColor(white)
          term.write(allGates[currentEdit].note)
        end
       -- Edit Gate Notes
      elseif mcY > 8 and mcY < 11 then
        term.setBackgroundColor(black)
        term.setTextColor(gray)
        term.setCursorPos(2,9)
        term.write(allGates[currentEdit].note)
        term.setTextColor(white)
        term.setCursorPos(2,9)
        local newNote = tostring(read())
        if newNote ~= "" and newNote ~= "nil" then
          allGates[currentEdit].note = newNote
          gateChange = true
        end
        term.setBackgroundColor(black)
        term.setCursorPos(2,9)
        for i = 2,termX,1 do
          term.write(" ")
        end
        term.setCursorPos(2,10)
        for i = 2,termX,1 do
          term.write(" ")
        end
        term.setCursorPos(2,9)
        term.setTextColor(white)
        term.write(allGates[currentEdit].note)
         -- Gate Dimension
      elseif mcY == 12 then
        if mcX > 12 and mcX < 16 then
          term.setCursorPos(13,12)
          term.setTextColor(gray)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.dim)
          term.setCursorPos(13,12)
          term.setTextColor(lblue)
          local newDim = tostring(read())
          if newDim ~= "" and tostring(newDim) ~= "nil" then
            allGates[currentEdit].loc.dim = newDim
            term.setCursorPos(13,12)
            term.write("                                      ")
            gateChange = true
          end
          term.setCursorPos(13,12)
          term.write("     ")
          term.setCursorPos(13,12)
          term.setTextColor(lblue)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.dim)
        end
         -- Gate X position
      elseif mcY == 13 then
        if mcX > 4 and mcX < 10 then
          term.setCursorPos(5,13)
          term.setTextColor(gray)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.x)
          term.setCursorPos(5,13)
          term.setTextColor(brown)
          local newX = tonumber(read())
          if tostring(newX) ~= "" and newX ~= nil then
            allGates[currentEdit].loc.x = newX
            gateChange = true
          end
          term.setCursorPos(5,13)
          term.write("     ")
          term.setCursorPos(5,13)
          term.setTextColor(brown)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.x)
        end
         -- Gate Y position
      elseif mcY == 14 then
        if mcX > 4 and mcX < 10 then
          term.setCursorPos(5,14)
          term.setTextColor(gray)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.y)
          term.setCursorPos(5,14)
          term.setTextColor(brown)
          local newY = tonumber(read())
          if tostring(newY) ~= "" and newY ~= nil then
            allGates[currentEdit].loc.y = newY
            gateChange = true
          end
          term.setCursorPos(5,14)
          term.write("     ")
          term.setCursorPos(5,14)
          term.setTextColor(brown)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.y)
        end
         -- Gate Z position
      elseif mcY == 15 then
        if mcX > 4 and mcX < 10 then
          term.setCursorPos(5,15)
          term.setTextColor(gray)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.z)
          term.setCursorPos(5,15)
          term.setTextColor(brown)
          local newZ = tonumber(read())
          if tostring(newZ) ~= "" and newZ ~= nil then
            allGates[currentEdit].loc.z = newZ
            gateChange = true
          end
          term.setCursorPos(5,15)
          term.write("     ")
          term.setCursorPos(5,15)
          term.setTextColor(brown)
          term.setBackgroundColor(black)
          term.write(allGates[currentEdit].loc.z)
        end
        -- Exit Edit Screen
      elseif mcY == (termY-1) then
        runState = "Edit"
        term.setBackgroundColor(black)
        term.setCursorPos(2,7)
        term.write("                                        ")
        term.setCursorPos(2,9)
        for i = 2,termX,1 do
          term.write(" ")
        end
        term.setCursorPos(2,10)
        for i = 2,termX,1 do
          term.write(" ")
        end
        for i = 12,15,1 do
          term.setCursorPos(2,i)
          term.write("                ")
        end
        term.setCursorPos(13,12)
        term.write("                                      ")
        term.setCursorPos((termX/2)-8,termY-1)
        term.write("                  ")
        drawCLI()
      end
    end
      -- DHD Settings
    if runState == "Cfg" then
        -- Save Settings
      if mcY == 2 and mcX > 38 and mcX < 45 then
        saveData(settingsData,"cfg")
        configChange = false
        drawSettingsUI()
        -- Close Settings (no save)
      elseif mcY == 2 and mcX > 44 and mcX <= termX then
        runState = "Dial"
        term.setBackgroundColor(black)
        term.clear()
        drawCLI()
      end
        -- Settings Column 1
        -- Edit thisGate
      if mcY == 4 and mcX > 16 and mcX < 27 then
        term.setBackgroundColor(black)
        term.setTextColor(gray)
        term.setCursorPos(17,4)
        term.write(dhdSettings.thisGate)
        term.setTextColor(cyan)
        term.setCursorPos(17,4)
        local newGate = tostring(read())
        if newGate ~= "" and newGate ~= "nil" and newGate ~= dhdSettings.thisGate and newGate:len() > 6 and newGate:len() < 10 then
          configChange = true
          dhdSettings.thisGate = newGate
          longName = ""
          tG = {}
          for i = 1,dhdSettings.thisGate:len(),1 do
            tG[i] = dhdSettings.thisGate:sub(i,i)
            if i < dhdSettings.thisGate:len() then
              longName = longName .. tG[i] .. " "
            else
              longName = longName .. tG[i]
            end
          end
        end
        term.setCursorPos(16,4)
        term.write("         ")
        drawSettingsUI()
        -- Change LOCKDOWN Password
      elseif mcY == 6 and mcX > 16 and mcX < 31 then
        term.setBackgroundColor(black)
        term.setTextColor(gray)
        term.setCursorPos(17,6)
        term.write(dhdSettings.password)
        term.setTextColor(orange)
        term.setCursorPos(17,6)
        local newPass = tostring(read())
        if newPass ~= "" and newPass ~= "nil" and newPass ~= dhdSettings.password then
          configChange = true
          dhdSettings.password = newPass
        end
        term.setCursorPos(17,6)
        term.write("           ")
        drawSettingsUI()
        -- Biolock ON/OFF
      elseif mcY == 8 and mcX > 16 and mcX < 21 and dhdSettings.bio.lock ~= "none" then
        if dhdSettings.bio.lock == "ON" then
          dhdSettings.bio.lock = "OFF"
          configChange = true
        elseif dhdSettings.bio.lock == "OFF" then
          dhdSettings.bio.lock = "ON"
          configChange = true
        end
        drawSettingsUI()
      elseif mcY == 8 and mcX > 22 and mcX < 24 and dhdSettings.bio.lock ~= "none" then
        drawAuthList(dhdSettings.bio.auth)
        local bioSide = { os.pullEvent("mouse_click") }
        if bioSide[3] > 26 and bioSide[2] < 31 then
          if bioSide[4] == 5 then
            dhdSettings.bio.auth = 1
            configChange = true
          elseif bioSide[4] == 7 then
            dhdSettings.bio.auth = 2
            configChange = true
          elseif bioSide[4] == 9 then
            dhdSettings.bio.auth = 3
            configChange = true
          elseif bioSide[4] == 11 then
            dhdSettings.bio.auth = 4
            configChange = true
          elseif bioSide[4] == 13 then
            dhdSettings.bio.auth = 5
            configChange = true
          end
        end
        drawSettingsUI()
        -- redNet/ccNet
      elseif mcY == 10 and mcX > 16 and mcX < 21 then
        if dhdSettings.net == "R" then
          netSend("ccNet")
          rednet.close(dhdSettings.rednet)
          dhdSettings.net = "C"
          modem = peripheral.wrap(dhdSettings.ccnet)
          modem.open(dhdSettings.channels.recv)
          configChange = true
        elseif dhdSettings.net == "C" then
          netSend("redNet")
          modem.close(dhdSettings.channels.recv)
          modem = nil
          dhdSettings.net = "R"
          rednet.open(dhdSettings.rednet)
          configChange = true
        end
        drawSettingsUI()
        -- Select redNet Side
      elseif mcY == 10 and mcX > 22 and mcX < 24 then
        if dhdSettings.net == "R" then
          drawSideList(dhdSettings.rednet)
          local netSide = { os.pullEvent("mouse_click") }
          if netSide[3] > 26 and netSide[2] < 35 then
            if netSide[4] == 5 then
              dhdSettings.rednet = "top"
              rednet.open("top")
              configChange = true
            elseif netSide[4] == 7 then
              dhdSettings.rednet = "bottom"
              rednet.open("bottom")
              configChange = true
            elseif netSide[4] == 9 then
              dhdSettings.rednet = "front"
              rednet.open("front")
              configChange = true
            elseif netSide[4] == 11 then
              dhdSettings.rednet = "back"
              rednet.open("back")
              configChange = true
            elseif netSide[4] == 13 then
              dhdSettings.rednet = "left"
              rednet.open("left")
              configChange = true
            elseif netSide[4] == 15 then
              dhdSettings.rednet = "right"
              rednet.open("right")
              configChange = true
            end
          end
          drawSettingsUI()
        -- Select ccNet Side
        elseif dhdSettings.net == "C" then
          drawSideList(dhdSettings.ccnet)
          local netSide = { os.pullEvent("mouse_click") }
          if netSide[3] > 26 and netSide[2] < 35 then
            if netSide[4] == 5 then
              dhdSettings.ccnet = "top"
              modem = peripheral.wrap("top")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            elseif netSide[4] == 7 then
              dhdSettings.ccnet = "bottom"
              modem = peripheral.wrap("bottom")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            elseif netSide[4] == 9 then
              dhdSettings.ccnet = "front"
              modem = peripheral.wrap("front")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            elseif netSide[4] == 11 then
              dhdSettings.ccnet = "back"
              modem = peripheral.wrap("back")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            elseif netSide[4] == 13 then
              dhdSettings.ccnet = "left"
              modem = peripheral.wrap("left")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            elseif netSide[4] == 15 then
              dhdSettings.ccnet = "right"
              modem = peripheral.wrap("right")
              modem.open(dhdSettings.channels.recv)
              configChange = true
            end
          end
          drawSettingsUI()
        end
        -- Change redNet Server / ccNet Send Channel
      elseif mcY == 12 and mcX > 16 and mcX < 20 then
        term.setBackgroundColor(black)
        term.setTextColor(gray)
        term.setCursorPos(17,12)
        if dhdSettings.net == "R" then
          term.write(dhdSettings.server)
        elseif dhdSettings.net == "C" then
          term.write(dhdSettings.channels.send)
        end
        term.setCursorPos(17,12)
        if dhdSettings.net == "R" then
          term.setTextColor(red)
        elseif dhdSettings.net == "C" then
          term.setTextColor(green)
        end
        local newServer = tonumber(read())
        if tostring(newServer) ~= "" and newServer ~= nil and tonumber(newServer) ~= dhdSettings.server then
          configChange = true
          if dhdSettings.net == "R" then
            dhdSettings.server = newServer
          elseif dhdSettings.net == "C" then
            dhdSettings.channels.send = newServer
          end
          term.setCursorPos(17,12)
          term.write("     ")
        end
        drawSettingsUI()
        -- Change ccNet Receive Channel
      elseif mcY == 12 and mcX > 22 and mcX < 26 then
        term.setBackgroundColor(black)
        term.setCursorPos(23,12)
        term.setTextColor(gray)
        term.write(dhdSettings.channels.recv)
        term.setCursorPos(23,12)
        term.setTextColor(green)
        local newChannel = tonumber(read())
        if tostring(newChannel) ~= "" and newChannel ~= nil and tonumber(newChannel) ~= dhdSettings.channels.recv then
          dhdSettings.channels.recv = newChannel
          configChange = true
        end
        term.setCursorPos(23,12)
        term.write("     ")
        drawSettingsUI()
        -- Select Marque Side
      elseif mcY == 14 and mcX < 24 then
        if mcX > 16 and mcX < 21  and dhdSettings.monB ~= "none" then
          dhdSettings.monB = "none"
          configChange = true
        elseif mcX > 22 and mcX < 24 then
          drawSideList(dhdSettings.monB)
          local monBSide = { os.pullEvent("mouse_click") }
          if monBSide[3] > 26 and monBSide[2] < 35 then
            if monBSide[4] == 5 then
              dhdSettings.monB = "top"
              monB = peripheral.wrap("top")
              configChange = true
            elseif monBSide[4] == 7 then
              dhdSettings.monB = "bottom"
              monB = peripheral.wrap("bottom")
              configChange = true
            elseif monBSide[4] == 9 then
              dhdSettings.monB = "front"
              monB = peripheral.wrap("front")
              configChange = true
            elseif monBSide[4] == 11 then
              dhdSettings.monB = "back"
              monB = peripheral.wrap("back")
              configChange = true
            elseif monBSide[4] == 13 then
              dhdSettings.monB = "left"
              monB = peripheral.wrap("left")
              configChange = true
            elseif monBSide[4] == 15 then
              dhdSettings.monB = "right"
              monB = peripheral.wrap("right")
              configChange = true
            end
          end
        end
        drawSettingsUI()
        -- Select List Monitor Side
      elseif mcY == 16 and mcX < 24 then
        if mcX > 16 and mcX < 21  and dhdSettings.monA ~= "none" then
          dhdSettings.monA = "none"
          configChange = true
        elseif mcX > 22 and mcX < 24 then
          drawSideList(dhdSettings.monA)
          local monASide = { os.pullEvent("mouse_click") }
          if monASide[3] > 26 and monASide[2] < 35 then
            if monASide[4] == 5 then
              dhdSettings.monA = "top"
              monA = peripheral.wrap("top")
              configChange = true
            elseif monASide[4] == 7 then
              dhdSettings.monA = "bottom"
              monA = peripheral.wrap("bottom")
              configChange = true
            elseif monASide[4] == 9 then
              dhdSettings.monA = "front"
              monA = peripheral.wrap("front")
              configChange = true
            elseif monASide[4] == 11 then
              dhdSettings.monA = "back"
              monA = peripheral.wrap("back")
              configChange = true
            elseif monASide[4] == 13 then
              dhdSettings.monA = "left"
              monA = peripheral.wrap("left")
              configChange = true
            elseif monASide[4] == 15 then
              dhdSettings.monA = "right"
              monA = peripheral.wrap("right")
              configChange = true
            end
          end
        end
        drawSettingsUI()
        -- Settings Column 2
        -- End Call Shield (ON/OFF)
      elseif mcY == 4 and mcX > 44 and mcX < 49 then
        if dhdSettings.ecShield == "ON" then
          dhdSettings.ecShield = "OFF"
          configChange = true
        elseif dhdSettings.ecShield == "OFF" then
          dhdSettings.ecShield = "ON"
          configChange = true
        end
        drawSettingsUI()
        -- Startup Shield (ON/OFF)
      elseif mcY == 6 and mcX > 44 and mcX < 49 then
        if dhdSettings.startShield == "ON" then
          dhdSettings.startShield = "OFF"
          configChange = true
        elseif dhdSettings.startShield == "OFF" then
          dhdSettings.startShield = "ON"
          configChange = true
        end
        drawSettingsUI()
        -- Call Logging (ON/OFF)
      elseif mcY == 8 and mcX > 44 and mcX < 49 then
        if dhdSettings.logs == "ON" then
          dhdSettings.logs = "OFF"
          configChange = true
        elseif dhdSettings.logs == "OFF" then
          dhdSettings.logs = "ON"
          configChange = true
        end
        drawSettingsUI()
        -- Last Gate Dialed (log)
      elseif mcY == 10 and mcX > 32 and mcX < 49 then
        term.setBackgroundColor(black)
        term.setCursorPos(33,10)
        term.setTextColor(gray)
        term.write(dhdSettings.lastGate)
        term.setCursorPos(33,10)
        term.setTextColor(lgray)
        local newLast = tostring(read())
        if newLast ~= "" and newLast ~= nil and newLast ~= dhdSettings.lastGate then
          dhdSettings.lastGate = newLast
          configChange = true
        end
        drawSettingsUI()
        -- Gate Dial History (log)
      elseif mcY == 12 and mcX > 32 and mcX < 49 then
        term.setBackgroundColor(black)
        term.setCursorPos(33,12)
        term.setTextColor(gray)
        term.write(dhdSettings.gateHistory)
        term.setCursorPos(33,12)
        term.setTextColor(lgray)
        local newHist = tostring(read())
        if newHist ~= "" and newHist ~= nil and newHist ~= dhdSettings.gateHistory then
          dhdSettings.gateHistory = newHist
          configChange = true
        end
        drawSettingsUI()
        -- Call Initiator ONLY for endCall (ON/OFF)
      elseif mcY == 14 and mcX > 44 and mcX < 49 then
        if dhdSettings.callEnd == "ON" then
          dhdSettings.callEnd = "OFF"
          configChange = true
        elseif dhdSettings.callEnd == "OFF" then
          dhdSettings.callEnd = "ON"
          configChange = true
        end
        drawSettingsUI()
      elseif mcY == 16 and mcX > 44 and mcX < 49 then
        if dhdSettings.bio.func == "none" then
          dhdSettings.bio.func = "shield"
          configChange = true
        elseif dhdSettings.bio.func == "shield" then
          dhdSettings.bio.func = "lock"
          configChange = true
        elseif dhdSettings.bio.func == "lock" then
          dhdSettings.bio.func = "none"
          configChange = true
        end
        drawSettingsUI()
      end
    end
  end
end

local function mScroll()
  while true do
    local scrollEvent = {os.pullEvent("mouse_scroll")}
    menuState = false
    if screenState == "list" then
      if scrollEvent[2] == -1 and pageNum > 1 then
        pageNum = pageNum - 1
        term.setBackgroundColor(black)
        term.clear()
      elseif scrollEvent[2] == 1 and pageNum < numPages then
        pageNum = pageNum + 1
        term.setBackgroundColor(black)
        term.clear()
      end
      drawCLI()
    end
  end
end

local function monTouch()
  while true do
    local touchEvent = {os.pullEvent("monitor_touch")}
    if touchEvent[2] == dhdSettings.monA and screenState == "info" then
      screenState = "list"
      drawCLI()  -- Maybe change monitor events to displayINFO() or something separate from CLI
    elseif touchEvent[2] == dhdSettings.monA and screenState == "list" then
      local tX = touchEvent[3]
      tY = touchEvent[4]
      if tY < 9 then
        screenState = "info"
        if monB ~= "none" then displayNotes(tY) end
      elseif tY > 8 then
        if tX < 10 then
          listPage = listPage - 1
          if listPage < 1 then listPage = 1 end
          displayGateList()
        elseif tX >9 then
          listPage = listPage + 1
          if listPage > listPages then listPage = listPages end
          displayGateList()
        end
      end
    elseif touchEvent[2] == dhdSettings.monB and screenState == "info" and gateStatus == "Disconnected" and secureStatus == "allclear" then
      local dialNum = (tY+((listPage-1)*8))
      if dialNum > #allGates then dialNum = #allGates end
      dialAddress = allGates[dialNum].addr
      gateStatus = "Dialing"
      netSend(dialAddress)
    elseif touchEvent[2] == dhdSettings.monB and gateStatus ~= "Disconnected" and secureStatus == "allclear" then
      netSend("endCall")
    end
  end
end

local function bioAnimation()
  while true do
    for i = 2,20,1 do
      term.setCursorPos(i,4)
      term.setBackgroundColor(blue)
      term.write(" ")
      term.setBackgroundColor(black)
      term.setCursorPos(i-1,4)
      term.write(" ")
      sleep(0.04)
    end
    for i = 20,2,-1 do
      term.setCursorPos(i,4)
      term.setBackgroundColor(blue)
      term.write(" ")
      term.setBackgroundColor(black)
      term.setCursorPos(i+1,4)
      term.write(" ")
      sleep(0.04)
    end
  end
end

local function bioScan()
  while true do
    local fistPrint = {os.pullEvent("biolock")}
    if fistPrint[5] >= dhdSettings.bio.auth then
      fistAuth = true
      if runState == "init" then
        return fistAuth
      else
        if dhdSettings.bio.func == "shield" then
          if shieldStatus == "OFF" then
            netSend("sON")
          elseif shieldStatus == "ON" then
            netSend("sOFF")
          else
            netSend("sON")
          end
        elseif dhdSettings.bio.func == "lock" then
          if runState ~= "lockdown" then
            netSend("lockdown")
          end
        end
      end
    end
  end
end

local function bioLogin()
  local bio = peripheral.wrap(dhdSettings.bio.side)
  fistAuth = false
  term.setBackgroundColor(black)
  term.clear()
  term.setTextColor(yellow)
  term.setCursorPos(2,2)
  term.write("Waiting for Bioscan")
  while fistAuth == false do
    local fistPrint = parallel.waitForAny(bioScan,bioAnimation)
    if fistAuth == true then
      return fistAuth
    end
  end
end

local function dhdKernel()
  if kernelState == true and secureStatus == "allclear" then
    parallel.waitForAny(mClick,mScroll,bioScan,monTouch,netReceive)  --,keyClick
  elseif kernelState == true and secureStatus == "lockdown" then
    parallel.waitForAny(secKernel) --,netReceive,bioScan
  else
    return kernelState
  end
  if runState == "reset" then
    netSend("reset")
    kernelState = false
  end
  if runState == "exit" then
    kernelState = false
  end
  --return runState
  return kernelState
end

local function firstRun()
  localInventory()
  --networkInventory()
  local ccLabel = os.getComputerLabel()
  if tostring(ccLabel) == "nil" or ccLabel == "" then
    os.setComputerLabel("ccDHD")
  end
  term.setCursorPos(2,2)
  term.setTextColor(white)
  term.write("I am " ..  os.getComputerLabel() .. " / cc# " .. os.getComputerID())
  term.setCursorPos(2,6)
  term.setTextColor(lblue)
  term.write("Please enter the number of the Gate Liaison")
  term.setTextColor(white)
  while true do
    term.setCursorPos(2,8)
    term.write("       ")
    term.setCursorPos(2,8)
    local newServer = tonumber(read())
    if newServer ~= "" and newServer ~= nil and newServer > 0 and newServer < 999 then
      dhdSettings.server = newServer
      break
    end
  end
  rednet.send(dhdSettings.server,"1stRun",true)
  local myGate = { rednet.receive(2) }
  if tonumber(myGate[1]) == dhdSettings.server then
    dhdSettings.thisGate = myGate[2]
  end
  local ccNetSend = { rednet.receive(2) }
  if tonumber(ccNetSend[1]) == dhdSettings.server then
    dhdSettings.channels.send = ccNetSend[2]
  end
  local ccNetRecv = { rednet.receive(2) }
  if tonumber(ccNetRecv[1]) == dhdSettings.server then
    dhdSettings.channels.recv = ccNetRecv[2]
  end
  saveData(settingsData,"cfg")
  if not fs.exists("/data/DHDgates") then
    saveData(dhdSettings.gateData,"gate")
  end
end

local function initMe()
  termX,termY = term.getSize()  -- standard 51x19 / cBang = 51x18
  term.setBackgroundColor(black)
  term.setTextColor(white)
  term.clear()
  term.setCursorPos(2,2)
  term.write("Initializing . . .")
  term.setCursorPos(1,4)
  if not fs.exists(settingsData) then firstRun() end
  ingestData(settingsData,"cfg")
  if dhdSettings.bio.lock == "ON" then bioLogin() end
  if #tArgs > 0 then
    for i = 1,#tArgs,1 do
      if tArgs[i] == "on" or tArgs[i] == "ON" or tArgs[i] == "On" or tArgs[i] == "oN" then
        netSend("sON")
      elseif tArgs[i] == "off" or tArgs[i] == "OFF" or tArgs[i] == "Off" or tArgs[i] == "oFF" then
        netSend("sOFF")
      elseif tArgs[i] == "reset" then
        netSend("endCall")
      end
    end
  else
    term.setCursorPos(2,4)
    term.write("Setting Shield . . .")
    if dhdSettings.startShield == "ON" then
      netSend("sON")
    elseif dhdSettings.startShield == "OFF" then
      netSend("sOFF")
    end
    term.setCursorPos(2,6)
    term.write("Querying Gate . . .")
    netSend("QRY")
    term.setCursorPos(2,8)
    term.write("Awaiting response . . .")
    if dhdSettings.net == "R" then
      local senderID, message = rednet.receive(1)
      if senderID == gateLiaison then
        updateInfo(message)
      end
    elseif dhdSettings.net == "C" then
      local netEvent = { os.pullEvent("modem_message") }
      if netEvent[3] == dhdSettings.channels.recv and netEvent[4] == dhdSettings.channels.send then
          updateInfo(netEvent[5])
      end
    end
  end
  term.setCursorPos(2,10)
  term.write("Ingesting gate data . . .")
  ingestData(dhdSettings.gateData,"gate")
  term.setBackgroundColor(black)
  term.clear()
  kernelState = true
  runState = "Dial"
  drawCLI()
end

initMe()

repeat
  dhdKernel()
  if runState == "exit" then kernelState = false end
  if kernelState == false then
    if monA ~= "none" then
       monA.setBackgroundColor(black)
       monA.clear()
    end
    if monB ~= "none" then
       monB.setBackgroundColor(black)
       monB.clear()
    end
    term.setBackgroundColor(black)
    term.setTextColor(white)
    term.clear()
    term.setCursorPos(1,1)
    if runState == "reboot" or runState == "reset" then os.reboot() end
    return
  end
until kernelState == false
