--[[ gate CLU ]]--
--[[ ver. 1.0 ]]--
--[[  by Dog  ]]--
--[[ pastebin ]]--
--[[ Z9aYt8jV ]]--
-- Manual Configuration
local rnsInterval = 5
local settingsFile = "/data/DHDconfig"
-- END Manual Configuration
local tArgs = { ... }
if tArgs[1] == "" or tArgs[1] == nil then
  term.setBackgroundColor(colors.black)
  term.setTextColor(colors.cyan)
  term.clear()
  term.setCursorPos(1,1)
  term.write("gateLiaison rCLU")
  term.setTextColor(colors.lightGray)
  term.setCursorPos(2,3)
  term.write("Valid Commands:")
  term.setCursorPos(1,5)
  term.setTextColor(colors.green)
  print(" ADDRESS  - Dial a valid ADDRESS")
  print(" endCall  - End the current call")
  print(" sON      - Shield ON")
  print(" sOFF     - Shield OFF")
  print(" lockdown - trigger a Lockdown")
  print(" allclear - end Lockdown")
  print(" QRY      - request update")
  print(" 1stRun   - request setup info")
  print(" restart  - reboot gate computer")
  print(" <any>    - listen for gateLiaison activity")
  print("")
  print(" Undocumented operation may result in")
  print("         unintended behavior")
  print("")
  return
end
local pingA
--local modem
local dhdConfig = fs.open(settingsFile,"r") or error("Cannot open " .. settingsFile, 2)
local dhdCfg = dhdConfig.readAll()
local dhdSettings = textutils.unserialize(dhdCfg)
dhdConfig.close()
local pingZERO = os.time()
if dhdSettings.net == "R" and dhdSettings.netSide ~= "none" then
  local gateLiaison = dhdSettings.server
  rednet.open(dhdSettings.netSide)
  rednet.send(dhdSettings.server,tArgs[1],true)
  if tArgs[1] == "1stRun" then
    sleep(0.25)
    rednet.send(dhdSettings.server,os.getComputerID(),true)
  end
elseif dhdSettings.net == "C" and dhdSettings.netSide ~= "none" then
  local modem = peripheral.wrap(dhdSettings.netSide)
  modem.open(dhdSettings.channels.recv)
  modem.transmit(dhdSettings.channels.send,dhdSettings.channels.recv,tArgs[1])
  if tArgs[1] == "1stRun" then
    sleep(0.25)
    modem.transmit(dhdSettings.channels.send,dhdSettings.channels.recv,os.getComputerID())
  end
end
term.setBackgroundColor(colors.black)
print("")
term.setTextColor(colors.cyan)
print("gateLiaison rCLU")
term.setTextColor(colors.gray)
-- redNet
if dhdSettings.net == "R" and dhdSettings.netSide ~= "none" then
  print(" cc    data      interval")
  if tArgs[1] == "ccNet" then return end
  local first = { rednet.receive(rnsInterval) }
  pingA = os.time()
  term.setTextColor(colors.red)
  if first[1] ~= nil then
    term.write(tostring(" " .. first[1]) .. string.rep(" ",math.floor(6-#tostring(first[1]))))
    if tArgs[1] ~= "1stRun" then
      print(tostring(first[2]) .. string.rep(" ",math.floor(10-#tostring(first[2]))) .. tostring(pingA-pingZERO))
    else
      local tempSettings = first[2]
      print(tempSettings.gate .. string.rep(" ",math.floor(10-#tostring(tempSettings.gate))) .. tostring(pingA-pingZERO))
      term.write(tostring(" " .. first[1]) .. string.rep(" ",math.floor(6-#tostring(first[1]))))
      print(tempSettings.server .. string.rep(" ",math.floor(10-#tostring(tempSettings.server))) .. tostring(pingA-pingZERO))
    end
  end
-- ccNet
elseif dhdSettings.net == "C" and dhdSettings.netSide ~= "none" then
  print(" chan   data      interval")
  if tArgs[1] == "redNet" then return end
  local first = { os.pullEvent("modem_message") }
  pingA = os.time()
  term.setTextColor(colors.green)
  if first[1] ~= nil then
    term.write(tostring(" " .. first[3]) .. string.rep(" ",math.floor(7-#tostring(first[3]))))
    if tArgs[1] ~= "1stRun" then
      print(tostring(first[5]) .. string.rep(" ",math.floor(10-#tostring(first[5]))) .. tostring(pingA-pingZERO))
    else
      local tempSettings = first[5]
      print(tempSettings.gate .. string.rep(" ",math.floor(10-#tostring(tempSettings.gate))) .. tostring(pingA-pingZERO))
      term.write(tostring(" " .. first[3]) .. string.rep(" ",math.floor(7-#tostring(first[3]))))
      print(tempSettings.server .. string.rep(" ",math.floor(10-#tostring(tempSettings.server))) .. tostring(pingA-pingZERO))
    end
  end
end
term.setTextColor(colors.gray)
term.write("Total transit & interval time: ")
term.setTextColor(colors.lightBlue)
print(tostring(pingA-pingZERO))
print("")
